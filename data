 
//using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml;

public partial class Editor : System.Web.UI.Page
{
 string server_path = "\\\\discasvr10\\amartiw";

    protected void Page_Load(object sender, EventArgs e)
    {
        bool registrado = false;

        if (Request.QueryString["linea"] != null) { ErrorLinea.Visible = true; ErrorLinea.InnerHtml = "<strong>Hay un error de cierre de etiqueta en la l√≠nea " + Request.QueryString["linea"] + "</strong>"; }

        if (Session["idusuariobs"] != null) { registrado = true; }
        if (registrado)
        {
            loginbut.Visible = false;
            registrobut.Visible = false;
            sinregbut.InnerText = "Editor";
        }
        if (registrado)
        {
            Regmenu.Visible = false;
            Logmenu.Visible = false;
            Outmenu.Visible = true;
        }
        else
        {
            Regmenu.Visible = true;
            Logmenu.Visible = true;
            Outmenu.Visible = false;
        }





        Response.ContentEncoding = System.Text.Encoding.UTF8;
        if ((TextArea1.Value != null) && (TextArea1.Value.Length > 0))
        {
            string SaveLocation;
            string fn = System.IO.Path.GetFileNameWithoutExtension(Text1.Value);
            if (registrado) fn = Consultarrepetidos(Text1.Value);
            if (registrado) SaveLocation = server_path + "\\" + Session["idusuariobs"] + "\\" + Text1.Value + ".txt";
            else { SaveLocation = server_path + "\\" + Text1.Value + ".txt"; }
            //Directory.CreateDirectory("\\\\discasvr10\\amartiw" + Session["idusuariobs"] + "\\");
            try
            {
                File.WriteAllText(SaveLocation,TextArea1.Value);
                Response.Write("The file has been uploaded.");

            }




            catch (Exception ex)
            {
                Response.Write("Error: " + ex.Message);
                //Note: Exception.Message returns a detailed message that describes the current exception.
                //For security reasons, we do not recommend that you return Exception.Message to end users in
                //production environments. It would be better to put a generic error message.
            }




            StreamReader contenido = new StreamReader(SaveLocation, Encoding.GetEncoding("UTF-8"));

            {

                string linea = "";
                ArrayList listadoPreguntas = new ArrayList();

                string lineavacia = "<br>";


                while (linea != null)
                {
                    linea = contenido.ReadLine();
                    if (linea == "\n") {listadoPreguntas.Add(lineavacia);}
                    else
                     {
                      if (!string.IsNullOrEmpty(linea))
                       listadoPreguntas.Add(linea);
                      else listadoPreguntas.Add(lineavacia);
                     }
                }
                contenido.Close();


                ArrayList listadoPreguntasConSaltos = new ArrayList();
                ArrayList listadoTipoPreguntas = new ArrayList();

                bool preguntaterminada = true;
                string restolinea = "";
                bool quedalinea = false;
                bool inicioencontrado = false;
                string tipopreg = "";

                int numeropreguntaparaerror = 0;
                while ((listadoPreguntas.Count > 0)
                             ||
                     (quedalinea))

                {

                    string preguntaainsertar = "";
                    int punteroiniciopreg = 0;
                    int punterofinpreg = 0;
                    string pregu = "";
                    pregu += restolinea;
                    if (quedalinea) pregu += "<br>";
                    if (listadoPreguntas.Count > 0)
                    {
                        if (listadoPreguntas[0].ToString() != "<br>")
                            pregu += listadoPreguntas[0].ToString();
                    }
                    //Response.Redirect("Error.aspx?linea=" + pregu);



                    if ((pregu.Contains("<QN>")) //Numeric
                                ||
                       (pregu.Contains("<QF>")) //Fill the blanks
                                ||
                       (pregu.Contains("<QM>")) //Multiple
                                ||
                        (!preguntaterminada))
                    {
                        char[] charspregu = pregu.ToCharArray();
                        for (int m = 0; m < charspregu.Length; m++)
                        {
                            if ((preguntaterminada)
                                    &&
                                (charspregu[m] == '<')
                                       &&
                               (charspregu[m + 1] == 'Q')
                                       &&
                                   (charspregu[m + 3] == '>')
                                    &&
                                (!inicioencontrado))
                            {
                                restolinea = "";
                                if (charspregu[m + 2] == 'N') tipopreg = "N";
                                if (charspregu[m + 2] == 'F') tipopreg = "F";
                                if (charspregu[m + 2] == 'M') tipopreg = "M";
                                punteroiniciopreg = m + 4;
                                inicioencontrado = true;
                            }








                            //PARTE MODIFICADA


                            if ((!preguntaterminada)
                                    &&
                                (charspregu[m] == '<')
                                       &&
                               (charspregu[m + 1] == 'Q')
                                       &&
                                   (charspregu[m + 3] == '>')
                                    &&
                                (inicioencontrado))
                            {
                                Response.Redirect("Editor.aspx?linea=" + numeropreguntaparaerror + "#footer");
                            }


                            //FIN GESTION ERRORES












                            if ((charspregu[m] == '<')
                                       &&
                               (charspregu[m + 1] == '/')
                                       &&
                                   (charspregu[m + 2] == 'Q')
                                       &&
                                   (charspregu[m + 3] == '>')
                                    &&
                                 (inicioencontrado))
                            {
                                punterofinpreg = m + 4;
                                break;
                            }

                        }
                        if (punterofinpreg == 0)
                        {
                            restolinea = pregu.Substring(punteroiniciopreg, pregu.Length - punteroiniciopreg);
                            quedalinea = true;
                            preguntaterminada = false;
                        }
                        else
                        {
                            preguntaainsertar += pregu.Substring(punteroiniciopreg, punterofinpreg - punteroiniciopreg - 4);
                            preguntaterminada = true;
                            if (!string.IsNullOrEmpty(preguntaainsertar))
                            {
                                listadoPreguntasConSaltos.Add(preguntaainsertar);
                                listadoTipoPreguntas.Add(tipopreg);
                            }
                            inicioencontrado = false;
                            if (punterofinpreg < pregu.Length)
                            {
                                restolinea = pregu.Substring(punterofinpreg, pregu.Length - punterofinpreg);
                                quedalinea = true;
                            }
                            else
                            {
                                restolinea = "";
                                quedalinea = false;
                            }

                        }
                    }
                    if (listadoPreguntas.Count > 0) { listadoPreguntas.RemoveAt(0); }
                    else break;
                    numeropreguntaparaerror = numeropreguntaparaerror + 1;
                }

                String rutaaux;
                if (registrado) rutaaux = server_path + Session["idusuariobs"] + "\\";
                else { rutaaux = server_path + "\\"; }
                String rutafinal = CrearXml(listadoPreguntasConSaltos, listadoTipoPreguntas, rutaaux, fn, Text2.Value);
                if (registrado)
                {
                    Insertar(fn);

                }

                //var result = string.Join(",", listadoPreguntasConSaltos.ToArray()
                //    .Select(o => o.ToString()).ToArray());
                //Label1.Text = result;

                Response.Redirect("documentotraducido.aspx?ruta=" + rutaaux + rutafinal);

            }
        }
        else
        {
            Response.Write("");
        }

    }

    private string Consultarrepetidos(string fn)
    {

/*
        string constr = ConfigurationManager.ConnectionStrings["jcMouseConnectionString"].ConnectionString;

        //string connStr = "server=localhost;user id=root;database=qti;allowuservariables=True";
        MySqlConnection conn = new MySqlConnection(constr);
        try
        {

            conn.Open();

            string sql = "SELECT file from files where user='" + Session["idusuariobs"] + "' and file='" + fn + "'";
            MySqlCommand cmd = new MySqlCommand(sql, conn);
            MySqlDataReader rdr = cmd.ExecuteReader();

            if (rdr.HasRows)
            {
                while (rdr.Read())
                {
                    fn = fn + DateTime.Now.ToString("HHmmss");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        conn.Close();
        Console.WriteLine("Done.");


*/

        return fn;
    }

    private void Insertar(string nombre)
    {
/*        string constr = ConfigurationManager.ConnectionStrings["jcMouseConnectionString"].ConnectionString;

        //string connStr = "server=localhost;user id=root;database=qti;allowuservariables=True";
        MySqlConnection conn = new MySqlConnection(constr);
        try
        {

            conn.Open();

            string sql = "INSERT INTO files VALUES(NULL,'" + Session["idusuariobs"] + "','" + nombre + "')";
            MySqlCommand cmd = new MySqlCommand(sql, conn);
            cmd.ExecuteNonQuery();
            //sql = "INSERT INTO files VALUES(NULL,'" + User1.Value + "','" + Pass1.Value + "')";
            //cmd = new MySqlCommand(sql, conn);
            //cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        conn.Close();
        Console.WriteLine("Done.");
*/

    }

    private void InitializeComponent()
    {

    }

    protected void TextBox1_TextChanged(object sender, EventArgs e)
    {
        // Open the text file using a stream reader.



    }


    public String CrearXml(ArrayList listado, ArrayList tipoPreguntas, string ruta, string nombreXML, string nombreExamen)

    {
        int numeroDePreguntasGeneradas = 0;

        XmlDocument miXml = new XmlDocument();
        XmlDeclaration xmlDeclaration = miXml.CreateXmlDeclaration("1.0", "UTF-8", "yes");
        XmlElement root = miXml.DocumentElement;
        miXml.InsertBefore(xmlDeclaration, root);

        XmlElement questestinterop = miXml.CreateElement("questestinterop");
        miXml.AppendChild(questestinterop);
        XmlElement assessment = miXml.CreateElement("assessment");
        XmlAttribute ident = miXml.CreateAttribute("ident");
        ident.Value = "333283";
        assessment.Attributes.Append(ident);
        questestinterop.AppendChild(assessment);
        XmlAttribute title = miXml.CreateAttribute("title");
        title.Value = nombreExamen;
        assessment.Attributes.Append(title);

        XmlElement qticomment = miXml.CreateElement("qticomment");
        assessment.AppendChild(qticomment);

        XmlElement duration = miXml.CreateElement("duration");
        assessment.AppendChild(duration);

        XmlElement qtimetadata = miXml.CreateElement("qtimetadata");
        assessment.AppendChild(qtimetadata);

        XmlElement qtimetadatafieldauthors = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldauthors);
        XmlElement fieldlabelauthors = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelauthorstext = miXml.CreateTextNode("AUTHORS");
        fieldlabelauthors.AppendChild(fieldlabelauthorstext);
        qtimetadatafieldauthors.AppendChild(fieldlabelauthors);
        qtimetadatafieldauthors.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldcreator = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldcreator);
        XmlElement fieldlabelcreator = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelcreatortext = miXml.CreateTextNode("CREATOR");
        fieldlabelcreator.AppendChild(fieldlabelcreatortext);
        qtimetadatafieldcreator.AppendChild(fieldlabelcreator);
        qtimetadatafieldcreator.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldshowcreator = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldshowcreator);
        XmlElement fieldlabelshowcreator = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelshowcreatortext = miXml.CreateTextNode("SHOW_CREATOR");
        fieldlabelshowcreator.AppendChild(fieldlabelshowcreatortext);
        qtimetadatafieldshowcreator.AppendChild(fieldlabelshowcreator);
        XmlElement fieldentryshowcreator = miXml.CreateElement("fieldentry");
        XmlText fieldentryshowcreatortext = miXml.CreateTextNode("True");
        fieldentryshowcreator.AppendChild(fieldentryshowcreatortext);
        qtimetadatafieldshowcreator.AppendChild(fieldentryshowcreator);

        XmlElement qtimetadatafieldscalename = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldscalename);
        XmlElement fieldlabelscalename = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelscalenametext = miXml.CreateTextNode("SCALENAME");
        fieldlabelscalename.AppendChild(fieldlabelscalenametext);
        qtimetadatafieldscalename.AppendChild(fieldlabelscalename);
        XmlElement fieldentryscalename = miXml.CreateElement("fieldentry");
        XmlText fieldentryscalenametext = miXml.CreateTextNode("STRONGLY_AGREE");
        fieldentryscalename.AppendChild(fieldentryscalenametext);
        qtimetadatafieldscalename.AppendChild(fieldentryscalename);

        XmlElement qtimetadatafieldeditauthors = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditauthors);
        XmlElement fieldlabeleditauthors = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditauthorstext = miXml.CreateTextNode("EDIT_AUTHORS");
        fieldlabeleditauthors.AppendChild(fieldlabeleditauthorstext);
        qtimetadatafieldeditauthors.AppendChild(fieldlabeleditauthors);
        XmlElement fieldentryeditauthors = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditauthorstext = miXml.CreateTextNode("True");
        fieldentryeditauthors.AppendChild(fieldentryeditauthorstext);
        qtimetadatafieldeditauthors.AppendChild(fieldentryeditauthors);

        XmlElement qtimetadatafieldeditdescription = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditdescription);
        XmlElement fieldlabeleditdescription = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditdescriptiontext = miXml.CreateTextNode("EDIT_DESCRIPTION");
        fieldlabeleditdescription.AppendChild(fieldlabeleditdescriptiontext);
        qtimetadatafieldeditdescription.AppendChild(fieldlabeleditdescription);
        XmlElement fieldentryeditdescription = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditdescriptiontext = miXml.CreateTextNode("True");
        fieldentryeditdescription.AppendChild(fieldentryeditdescriptiontext);
        qtimetadatafieldeditdescription.AppendChild(fieldentryeditdescription);

        XmlElement qtimetadatafieldattachment = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldattachment);
        XmlElement fieldlabelattachment = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelattachmenttext = miXml.CreateTextNode("ATTACHMENT");
        fieldlabelattachment.AppendChild(fieldlabelattachmenttext);
        qtimetadatafieldattachment.AppendChild(fieldlabelattachment);
        qtimetadatafieldattachment.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafielddisplaytemplate = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafielddisplaytemplate);
        XmlElement fieldlabeldisplaytemplate = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeldisplaytemplatetext = miXml.CreateTextNode("DISPLAY_TEMPLATE");
        fieldlabeldisplaytemplate.AppendChild(fieldlabeldisplaytemplatetext);
        qtimetadatafielddisplaytemplate.AppendChild(fieldlabeldisplaytemplate);
        XmlElement fieldentrydisplaytemplate = miXml.CreateElement("fieldentry");
        XmlText fieldentrydisplaytemplatetext = miXml.CreateTextNode("True");
        fieldentrydisplaytemplate.AppendChild(fieldentrydisplaytemplatetext);
        qtimetadatafielddisplaytemplate.AppendChild(fieldentrydisplaytemplate);

        XmlElement qtimetadatafieldstartdate = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldstartdate);
        XmlElement fieldlabelstartdate = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelstartdatetext = miXml.CreateTextNode("START_DATE");
        fieldlabelstartdate.AppendChild(fieldlabelstartdatetext);
        qtimetadatafieldstartdate.AppendChild(fieldlabelstartdate);
        qtimetadatafieldstartdate.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldenddate = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldenddate);
        XmlElement fieldlabelenddate = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelenddatetext = miXml.CreateTextNode("END_DATE");
        fieldlabelenddate.AppendChild(fieldlabelenddatetext);
        qtimetadatafieldenddate.AppendChild(fieldlabelenddate);
        qtimetadatafieldenddate.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldretractdate = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldretractdate);
        XmlElement fieldlabelretractdate = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelretractdatetext = miXml.CreateTextNode("RETRACT_DATE");
        fieldlabelretractdate.AppendChild(fieldlabelretractdatetext);
        qtimetadatafieldretractdate.AppendChild(fieldlabelretractdate);
        qtimetadatafieldretractdate.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldconsiderstartd = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldconsiderstartd);
        XmlElement fieldlabelconsiderstartd = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelconsiderstartdtext = miXml.CreateTextNode("CONSIDER_START_DATE");
        fieldlabelconsiderstartd.AppendChild(fieldlabelconsiderstartdtext);
        qtimetadatafieldconsiderstartd.AppendChild(fieldlabelconsiderstartd);
        XmlElement fieldentryconsiderstartd = miXml.CreateElement("fieldentry");
        XmlText fieldentryconsiderstartdtext = miXml.CreateTextNode("False");
        fieldentryconsiderstartd.AppendChild(fieldentryconsiderstartdtext);
        qtimetadatafieldconsiderstartd.AppendChild(fieldentryconsiderstartd);

        XmlElement qtimetadatafieldconsiderendd = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldconsiderendd);
        XmlElement fieldlabelconsiderendd = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelconsiderenddtext = miXml.CreateTextNode("CONSIDER_END_DATE");
        fieldlabelconsiderendd.AppendChild(fieldlabelconsiderenddtext);
        qtimetadatafieldconsiderendd.AppendChild(fieldlabelconsiderendd);
        XmlElement fieldentryconsiderendd = miXml.CreateElement("fieldentry");
        XmlText fieldentryconsiderenddtext = miXml.CreateTextNode("False");
        fieldentryconsiderendd.AppendChild(fieldentryconsiderenddtext);
        qtimetadatafieldconsiderendd.AppendChild(fieldentryconsiderendd);

        XmlElement qtimetadatafieldconsiderretractd = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldconsiderretractd);
        XmlElement fieldlabelconsiderretractd = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelconsiderretractdtext = miXml.CreateTextNode("CONSIDER_RETRACT_DATE");
        fieldlabelconsiderretractd.AppendChild(fieldlabelconsiderretractdtext);
        qtimetadatafieldconsiderretractd.AppendChild(fieldlabelconsiderretractd);
        XmlElement fieldentryconsiderretractd = miXml.CreateElement("fieldentry");
        XmlText fieldentryconsiderretractdtext = miXml.CreateTextNode("False");
        fieldentryconsiderretractd.AppendChild(fieldentryconsiderretractdtext);
        qtimetadatafieldconsiderretractd.AppendChild(fieldentryconsiderretractd);

        XmlElement qtimetadatafieldeditendd = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditendd);
        XmlElement fieldlabeleditendd = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditenddtext = miXml.CreateTextNode("EDIT_END_DATE");
        fieldlabeleditendd.AppendChild(fieldlabeleditenddtext);
        qtimetadatafieldeditendd.AppendChild(fieldlabeleditendd);
        XmlElement fieldentryeditendd = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditenddtext = miXml.CreateTextNode("True");
        fieldentryeditendd.AppendChild(fieldentryeditenddtext);
        qtimetadatafieldeditendd.AppendChild(fieldentryeditendd);

        XmlElement qtimetadatafieldeditretractd = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditretractd);
        XmlElement fieldlabeleditretractd = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditretractdtext = miXml.CreateTextNode("EDIT_RETRACT_DATE");
        fieldlabeleditretractd.AppendChild(fieldlabeleditretractdtext);
        qtimetadatafieldeditretractd.AppendChild(fieldlabeleditretractd);
        XmlElement fieldentryeditretractd = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditretractdtext = miXml.CreateTextNode("True");
        fieldentryeditretractd.AppendChild(fieldentryeditretractdtext);
        qtimetadatafieldeditretractd.AppendChild(fieldentryeditretractd);

        XmlElement qtimetadatafieldareleasedto = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldareleasedto);
        XmlElement fieldlabelareleasedto = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelareleasedtotext = miXml.CreateTextNode("ASSESSMENT_RELEASED_TO");
        fieldlabelareleasedto.AppendChild(fieldlabelareleasedtotext);
        qtimetadatafieldareleasedto.AppendChild(fieldlabelareleasedto);
        XmlElement fieldentryareleasedto = miXml.CreateElement("fieldentry");
        XmlText fieldentryareleasedtotext = miXml.CreateTextNode("Curso C 2014 ma√±ana");//CAMBIAR
        fieldentryareleasedto.AppendChild(fieldentryareleasedtotext);
        qtimetadatafieldareleasedto.AppendChild(fieldentryareleasedto);

        XmlElement qtimetadatafieldeditpublishanony = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditpublishanony);
        XmlElement fieldlabeleditpublishanony = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditpublishanonytext = miXml.CreateTextNode("EDIT_PUBLISH_ANONYMOUS");
        fieldlabeleditpublishanony.AppendChild(fieldlabeleditpublishanonytext);
        qtimetadatafieldeditpublishanony.AppendChild(fieldlabeleditpublishanony);
        XmlElement fieldentryeditpublishanony = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditpublishanonytext = miXml.CreateTextNode("True");
        fieldentryeditpublishanony.AppendChild(fieldentryeditpublishanonytext);
        qtimetadatafieldeditpublishanony.AppendChild(fieldentryeditpublishanony);

        XmlElement qtimetadatafieldeditauthusers = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditauthusers);
        XmlElement fieldlabeleditauthusers = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditauthuserstext = miXml.CreateTextNode("EDIT_AUTHENTICATED_USERS");
        fieldlabeleditauthusers.AppendChild(fieldlabeleditauthuserstext);
        qtimetadatafieldeditauthusers.AppendChild(fieldlabeleditauthusers);
        XmlElement fieldentryeditauthusers = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditauthuserstext = miXml.CreateTextNode("True");
        fieldentryeditauthusers.AppendChild(fieldentryeditauthuserstext);
        qtimetadatafieldeditauthusers.AppendChild(fieldentryeditauthusers);

        XmlElement qtimetadatafieldallowip = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldallowip);
        XmlElement fieldlabelallowip = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelallowiptext = miXml.CreateTextNode("ALLOW_IP");
        fieldlabelallowip.AppendChild(fieldlabelallowiptext);
        qtimetadatafieldallowip.AppendChild(fieldlabelallowip);
        XmlElement fieldentryallowip = miXml.CreateElement("fieldentry");
        XmlText fieldentryallowiptext = miXml.CreateTextNode("null");
        fieldentryallowip.AppendChild(fieldentryallowiptext);
        qtimetadatafieldallowip.AppendChild(fieldentryallowip);

        XmlElement qtimetadatafieldconsiderallowip = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldconsiderallowip);
        XmlElement fieldlabelconsiderallowip = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelconsiderallowiptext = miXml.CreateTextNode("CONSIDER_ALLOW_IP");
        fieldlabelconsiderallowip.AppendChild(fieldlabelconsiderallowiptext);
        qtimetadatafieldconsiderallowip.AppendChild(fieldlabelconsiderallowip);
        XmlElement fieldentryconsiderallowip = miXml.CreateElement("fieldentry");
        XmlText fieldentryconsiderallowiptext = miXml.CreateTextNode("False");
        fieldentryconsiderallowip.AppendChild(fieldentryconsiderallowiptext);
        qtimetadatafieldconsiderallowip.AppendChild(fieldentryconsiderallowip);

        XmlElement qtimetadatafieldconsideruserid = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldconsideruserid);
        XmlElement fieldlabelconsideruserid = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelconsideruseridtext = miXml.CreateTextNode("CONSIDER_USERID");
        fieldlabelconsideruserid.AppendChild(fieldlabelconsideruseridtext);
        qtimetadatafieldconsideruserid.AppendChild(fieldlabelconsideruserid);
        XmlElement fieldentryconsideruserid = miXml.CreateElement("fieldentry");
        XmlText fieldentryconsideruseridtext = miXml.CreateTextNode("False");
        fieldentryconsideruserid.AppendChild(fieldentryconsideruseridtext);
        qtimetadatafieldconsideruserid.AppendChild(fieldentryconsideruserid);

        XmlElement qtimetadatafielduserid = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafielduserid);
        XmlElement fieldlabeluserid = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeluseridtext = miXml.CreateTextNode("USERID");
        fieldlabeluserid.AppendChild(fieldlabeluseridtext);
        qtimetadatafielduserid.AppendChild(fieldlabeluserid);
        qtimetadatafielduserid.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldpassword = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldpassword);
        XmlElement fieldlabelpassword = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelpasswordtext = miXml.CreateTextNode("PASSWORD");
        fieldlabelpassword.AppendChild(fieldlabelpasswordtext);
        qtimetadatafieldpassword.AppendChild(fieldlabelpassword);
        qtimetadatafieldpassword.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldeditallowip = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditallowip);
        XmlElement fieldlabeleditallowip = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditallowiptext = miXml.CreateTextNode("EDIT_ALLOW_IP");
        fieldlabeleditallowip.AppendChild(fieldlabeleditallowiptext);
        qtimetadatafieldeditallowip.AppendChild(fieldlabeleditallowip);
        XmlElement fieldentryeditallowip = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditallowiptext = miXml.CreateTextNode("True");
        fieldentryeditallowip.AppendChild(fieldentryeditallowiptext);
        qtimetadatafieldeditallowip.AppendChild(fieldentryeditallowip);

        XmlElement qtimetadatafieldedituserid = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldedituserid);
        XmlElement fieldlabeledituserid = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeledituseridtext = miXml.CreateTextNode("EDIT_USERID");
        fieldlabeledituserid.AppendChild(fieldlabeledituseridtext);
        qtimetadatafieldedituserid.AppendChild(fieldlabeledituserid);
        XmlElement fieldentryedituserid = miXml.CreateElement("fieldentry");
        XmlText fieldentryedituseridtext = miXml.CreateTextNode("True");
        fieldentryedituserid.AppendChild(fieldentryedituseridtext);
        qtimetadatafieldedituserid.AppendChild(fieldentryedituserid);

        XmlElement qtimetadatafieldrequirelockbrow = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldrequirelockbrow);
        XmlElement fieldlabelrequirelockbrow = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelrequirelockbrowtext = miXml.CreateTextNode("REQUIRE_LOCKED_BROWSER");
        fieldlabelrequirelockbrow.AppendChild(fieldlabelrequirelockbrowtext);
        qtimetadatafieldrequirelockbrow.AppendChild(fieldlabelrequirelockbrow);
        XmlElement fieldentryrequirelockbrow = miXml.CreateElement("fieldentry");
        XmlText fieldentryrequirelockbrowtext = miXml.CreateTextNode("False");
        fieldentryrequirelockbrow.AppendChild(fieldentryrequirelockbrowtext);
        qtimetadatafieldrequirelockbrow.AppendChild(fieldentryrequirelockbrow);

        XmlElement qtimetadatafieldexitpassward = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldexitpassward);
        XmlElement fieldlabelexitpassward = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelexitpasswardtext = miXml.CreateTextNode("EXIT_PASSWARD");
        fieldlabelexitpassward.AppendChild(fieldlabelexitpasswardtext);
        qtimetadatafieldexitpassward.AppendChild(fieldlabelexitpassward);
        qtimetadatafieldexitpassward.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldconsiderduration = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldconsiderduration);
        XmlElement fieldlabelconsiderduration = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelconsiderdurationtext = miXml.CreateTextNode("CONSIDER_DURATION");
        fieldlabelconsiderduration.AppendChild(fieldlabelconsiderdurationtext);
        qtimetadatafieldconsiderduration.AppendChild(fieldlabelconsiderduration);
        XmlElement fieldentryconsiderduration = miXml.CreateElement("fieldentry");
        XmlText fieldentryconsiderdurationtext = miXml.CreateTextNode("False");
        fieldentryconsiderduration.AppendChild(fieldentryconsiderdurationtext);
        qtimetadatafieldconsiderduration.AppendChild(fieldentryconsiderduration);

        XmlElement qtimetadatafieldautosubmit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldautosubmit);
        XmlElement fieldlabelautosubmit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelautosubmittext = miXml.CreateTextNode("AUTO_SUBMIT");
        fieldlabelautosubmit.AppendChild(fieldlabelautosubmittext);
        qtimetadatafieldautosubmit.AppendChild(fieldlabelautosubmit);
        XmlElement fieldentryautosubmit = miXml.CreateElement("fieldentry");
        XmlText fieldentryautosubmittext = miXml.CreateTextNode("False");
        fieldentryautosubmit.AppendChild(fieldentryautosubmittext);
        qtimetadatafieldautosubmit.AppendChild(fieldentryautosubmit);

        XmlElement qtimetadatafieldeditduration = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditduration);
        XmlElement fieldlabeleditduration = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditdurationtext = miXml.CreateTextNode("EDIT_DURATION");
        fieldlabeleditduration.AppendChild(fieldlabeleditdurationtext);
        qtimetadatafieldeditduration.AppendChild(fieldlabeleditduration);
        XmlElement fieldentryeditduration = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditdurationtext = miXml.CreateTextNode("True");
        fieldentryeditduration.AppendChild(fieldentryeditdurationtext);
        qtimetadatafieldeditduration.AppendChild(fieldentryeditduration);

        XmlElement qtimetadatafieldeditautosubmit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditautosubmit);
        XmlElement fieldlabeleditautosubmit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditautosubmittext = miXml.CreateTextNode("EDIT_AUTO_SUBMIT");
        fieldlabeleditautosubmit.AppendChild(fieldlabeleditautosubmittext);
        qtimetadatafieldeditautosubmit.AppendChild(fieldlabeleditautosubmit);
        XmlElement fieldentryeditautosubmit = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditautosubmittext = miXml.CreateTextNode("True");
        fieldentryeditautosubmit.AppendChild(fieldentryeditautosubmittext);
        qtimetadatafieldeditautosubmit.AppendChild(fieldentryeditautosubmit);

        XmlElement qtimetadatafieldnavigation = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldnavigation);
        XmlElement fieldlabelnavigation = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelnavigationtext = miXml.CreateTextNode("NAVIGATION");
        fieldlabelnavigation.AppendChild(fieldlabelnavigationtext);
        qtimetadatafieldnavigation.AppendChild(fieldlabelnavigation);
        XmlElement fieldentrynavigation = miXml.CreateElement("fieldentry");
        XmlText fieldentrynavigationtext = miXml.CreateTextNode("RANDOM");
        fieldentrynavigation.AppendChild(fieldentrynavigationtext);
        qtimetadatafieldnavigation.AppendChild(fieldentrynavigation);

        XmlElement qtimetadatafieldquestionlayout = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldquestionlayout);
        XmlElement fieldlabelquestionlayout = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelquestionlayouttext = miXml.CreateTextNode("QUESTION_LAYOUT");
        fieldlabelquestionlayout.AppendChild(fieldlabelquestionlayouttext);
        qtimetadatafieldquestionlayout.AppendChild(fieldlabelquestionlayout);
        XmlElement fieldentryquestionlayout = miXml.CreateElement("fieldentry");
        XmlText fieldentryquestionlayouttext = miXml.CreateTextNode("I");
        fieldentryquestionlayout.AppendChild(fieldentryquestionlayouttext);
        qtimetadatafieldquestionlayout.AppendChild(fieldentryquestionlayout);

        XmlElement qtimetadatafieldquestionnumbering = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldquestionnumbering);
        XmlElement fieldlabelquestionnumbering = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelquestionnumberingtext = miXml.CreateTextNode("QUESTION_NUMBERING");
        fieldlabelquestionnumbering.AppendChild(fieldlabelquestionnumberingtext);
        qtimetadatafieldquestionnumbering.AppendChild(fieldlabelquestionnumbering);
        XmlElement fieldentryquestionnumbering = miXml.CreateElement("fieldentry");
        XmlText fieldentryquestionnumberingtext = miXml.CreateTextNode("CONTINUOUS");
        fieldentryquestionnumbering.AppendChild(fieldentryquestionnumberingtext);
        qtimetadatafieldquestionnumbering.AppendChild(fieldentryquestionnumbering);

        XmlElement qtimetadatafieldeditnavigation = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditnavigation);
        XmlElement fieldlabeleditnavigation = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditnavigationtext = miXml.CreateTextNode("EDIT_NAVIGATION");
        fieldlabeleditnavigation.AppendChild(fieldlabeleditnavigationtext);
        qtimetadatafieldeditnavigation.AppendChild(fieldlabeleditnavigation);
        XmlElement fieldentryeditnavigation = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditnavigationtext = miXml.CreateTextNode("True");
        fieldentryeditnavigation.AppendChild(fieldentryeditnavigationtext);
        qtimetadatafieldeditnavigation.AppendChild(fieldentryeditnavigation);

        XmlElement qtimetadatafieldeditquestlayout = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditquestlayout);
        XmlElement fieldlabeleditquestlayout = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditquestlayouttext = miXml.CreateTextNode("EDIT_QUESTION_LAYOUT");
        fieldlabeleditquestlayout.AppendChild(fieldlabeleditquestlayouttext);
        qtimetadatafieldeditquestlayout.AppendChild(fieldlabeleditquestlayout);
        XmlElement fieldentryeditquestlayout = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditquestlayouttext = miXml.CreateTextNode("True");
        fieldentryeditquestlayout.AppendChild(fieldentryeditquestlayouttext);
        qtimetadatafieldeditquestlayout.AppendChild(fieldentryeditquestlayout);

        XmlElement qtimetadatafieldeditquestnumbering = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditquestnumbering);
        XmlElement fieldlabeleditquestnumbering = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditquestnumberingtext = miXml.CreateTextNode("EDIT_QUESTION_NUMBERING");
        fieldlabeleditquestnumbering.AppendChild(fieldlabeleditquestnumberingtext);
        qtimetadatafieldeditquestnumbering.AppendChild(fieldlabeleditquestnumbering);
        XmlElement fieldentryeditquestnumbering = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditquestnumberingtext = miXml.CreateTextNode("True");
        fieldentryeditquestnumbering.AppendChild(fieldentryeditquestnumberingtext);
        qtimetadatafieldeditquestnumbering.AppendChild(fieldentryeditquestnumbering);

        XmlElement qtimetadatafieldmarkforreview = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldmarkforreview);
        XmlElement fieldlabelmarkforreview = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelmarkforreviewtext = miXml.CreateTextNode("MARK_FOR_REVIEW");
        fieldlabelmarkforreview.AppendChild(fieldlabelmarkforreviewtext);
        qtimetadatafieldmarkforreview.AppendChild(fieldlabelmarkforreview);
        XmlElement fieldentrymarkforreview = miXml.CreateElement("fieldentry");
        XmlText fieldentrymarkforreviewtext = miXml.CreateTextNode("False");
        fieldentrymarkforreview.AppendChild(fieldentrymarkforreviewtext);
        qtimetadatafieldmarkforreview.AppendChild(fieldentrymarkforreview);

        XmlElement qtimetadatafieldlatehandling = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldlatehandling);
        XmlElement fieldlabellatehandling = miXml.CreateElement("fieldlabel");
        XmlText fieldlabellatehandlingtext = miXml.CreateTextNode("LATE_HANDLING");
        fieldlabellatehandling.AppendChild(fieldlabellatehandlingtext);
        qtimetadatafieldlatehandling.AppendChild(fieldlabellatehandling);
        XmlElement fieldentrylatehandling = miXml.CreateElement("fieldentry");
        XmlText fieldentrylatehandlingtext = miXml.CreateTextNode("False");
        fieldentrylatehandling.AppendChild(fieldentrylatehandlingtext);
        qtimetadatafieldlatehandling.AppendChild(fieldentrylatehandling);

        XmlElement qtimetadatafieldmaxattempts = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldmaxattempts);
        XmlElement fieldlabelmaxattempts = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelmaxattemptstext = miXml.CreateTextNode("MAX_ATTEMPTS");
        fieldlabelmaxattempts.AppendChild(fieldlabelmaxattemptstext);
        qtimetadatafieldmaxattempts.AppendChild(fieldlabelmaxattempts);
        XmlElement fieldentrymaxattempts = miXml.CreateElement("fieldentry");
        XmlText fieldentrymaxattemptstext = miXml.CreateTextNode("1");
        fieldentrymaxattempts.AppendChild(fieldentrymaxattemptstext);
        qtimetadatafieldmaxattempts.AppendChild(fieldentrymaxattempts);

        XmlElement qtimetadatafieldeditlatehandling = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditlatehandling);
        XmlElement fieldlabeleditlatehandling = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditlatehandlingtext = miXml.CreateTextNode("EDIT_LATE_HANDLING");
        fieldlabeleditlatehandling.AppendChild(fieldlabeleditlatehandlingtext);
        qtimetadatafieldeditlatehandling.AppendChild(fieldlabeleditlatehandling);
        XmlElement fieldentryeditlatehandling = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditlatehandlingtext = miXml.CreateTextNode("True");
        fieldentryeditlatehandling.AppendChild(fieldentryeditlatehandlingtext);
        qtimetadatafieldeditlatehandling.AppendChild(fieldentryeditlatehandling);

        XmlElement qtimetadatafieldeditmaxattempts = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditmaxattempts);
        XmlElement fieldlabeleditmaxattempts = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditmaxattemptstext = miXml.CreateTextNode("EDIT_MAX_ATTEMPTS");
        fieldlabeleditmaxattempts.AppendChild(fieldlabeleditmaxattemptstext);
        qtimetadatafieldeditmaxattempts.AppendChild(fieldlabeleditmaxattempts);
        XmlElement fieldentryeditmaxattempts = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditmaxattemptstext = miXml.CreateTextNode("True");
        fieldentryeditmaxattempts.AppendChild(fieldentryeditmaxattemptstext);
        qtimetadatafieldeditmaxattempts.AppendChild(fieldentryeditmaxattempts);

        XmlElement qtimetadatafieldautosave = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldautosave);
        XmlElement fieldlabelautosave = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelautosavetext = miXml.CreateTextNode("AUTO_SAVE");
        fieldlabelautosave.AppendChild(fieldlabelautosavetext);
        qtimetadatafieldautosave.AppendChild(fieldlabelautosave);
        XmlElement fieldentryautosave = miXml.CreateElement("fieldentry");
        XmlText fieldentryautosavetext = miXml.CreateTextNode("False");
        fieldentryautosave.AppendChild(fieldentryautosavetext);
        qtimetadatafieldautosave.AppendChild(fieldentryautosave);

        XmlElement qtimetadatafieldeditautosave = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditautosave);
        XmlElement fieldlabeleditautosave = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditautosavetext = miXml.CreateTextNode("EDIT_AUTO_SAVE");
        fieldlabeleditautosave.AppendChild(fieldlabeleditautosavetext);
        qtimetadatafieldeditautosave.AppendChild(fieldlabeleditautosave);
        XmlElement fieldentryeditautosave = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditautosavetext = miXml.CreateTextNode("True");
        fieldentryeditautosave.AppendChild(fieldentryeditautosavetext);
        qtimetadatafieldeditautosave.AppendChild(fieldentryeditautosave);

        XmlElement qtimetadatafieldeditassessfeed = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditassessfeed);
        XmlElement fieldlabeleditassessfeed = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditassessfeedtext = miXml.CreateTextNode("EDIT_ASSESSFEEDBACK");
        fieldlabeleditassessfeed.AppendChild(fieldlabeleditassessfeedtext);
        qtimetadatafieldeditassessfeed.AppendChild(fieldlabeleditassessfeed);
        XmlElement fieldentryeditassessfeed = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditassessfeedtext = miXml.CreateTextNode("True");
        fieldentryeditassessfeed.AppendChild(fieldentryeditassessfeedtext);
        qtimetadatafieldeditassessfeed.AppendChild(fieldentryeditassessfeed);

        XmlElement qtimetadatafieldsubmissionmsg = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldsubmissionmsg);
        XmlElement fieldlabelsubmissionmsg = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsubmissionmsgtext = miXml.CreateTextNode("SUBMISSION_MESSAGE");
        fieldlabelsubmissionmsg.AppendChild(fieldlabelsubmissionmsgtext);
        qtimetadatafieldsubmissionmsg.AppendChild(fieldlabelsubmissionmsg);
        qtimetadatafieldsubmissionmsg.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldfinishurl = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfinishurl);
        XmlElement fieldlabelfinishurl = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfinishurltext = miXml.CreateTextNode("FINISH_URL");
        fieldlabelfinishurl.AppendChild(fieldlabelfinishurltext);
        qtimetadatafieldfinishurl.AppendChild(fieldlabelfinishurl);
        qtimetadatafieldfinishurl.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldeditfinishurl = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditfinishurl);
        XmlElement fieldlabeleditfinishurl = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditfinishurltext = miXml.CreateTextNode("EDIT_FINISH_URL");
        fieldlabeleditfinishurl.AppendChild(fieldlabeleditfinishurltext);
        qtimetadatafieldeditfinishurl.AppendChild(fieldlabeleditfinishurl);
        XmlElement fieldentryeditfinishurl = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditfinishurltext = miXml.CreateTextNode("True");
        fieldentryeditfinishurl.AppendChild(fieldentryeditfinishurltext);
        qtimetadatafieldeditfinishurl.AppendChild(fieldentryeditfinishurl);

        XmlElement qtimetadatafieldfeeddelivery = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeeddelivery);
        XmlElement fieldlabelfeeddelivery = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeeddeliverytext = miXml.CreateTextNode("FEEDBACK_DELIVERY");
        fieldlabelfeeddelivery.AppendChild(fieldlabelfeeddeliverytext);
        qtimetadatafieldfeeddelivery.AppendChild(fieldlabelfeeddelivery);
        XmlElement fieldentryfeeddelivery = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeeddeliverytext = miXml.CreateTextNode("NONE");
        fieldentryfeeddelivery.AppendChild(fieldentryfeeddeliverytext);
        qtimetadatafieldfeeddelivery.AppendChild(fieldentryfeeddelivery);

        XmlElement qtimetadatafieldfeedcomponopt = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeedcomponopt);
        XmlElement fieldlabelfeedcomponopt = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeedcomponopttext = miXml.CreateTextNode("FEEDBACK_COMPONENT_OPTION");
        fieldlabelfeedcomponopt.AppendChild(fieldlabelfeedcomponopttext);
        qtimetadatafieldfeedcomponopt.AppendChild(fieldlabelfeedcomponopt);
        XmlElement fieldentryfeedcomponopt = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeedcomponopttext = miXml.CreateTextNode("SELECT_COMPONENTS");
        fieldentryfeedcomponopt.AppendChild(fieldentryfeedcomponopttext);
        qtimetadatafieldfeedcomponopt.AppendChild(fieldentryfeedcomponopt);

        XmlElement qtimetadatafieldfeedauthoring = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeedauthoring);
        XmlElement fieldlabelfeedauthoring = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeedauthoringtext = miXml.CreateTextNode("FEEDBACK_AUTHORING");
        fieldlabelfeedauthoring.AppendChild(fieldlabelfeedauthoringtext);
        qtimetadatafieldfeedauthoring.AppendChild(fieldlabelfeedauthoring);
        XmlElement fieldentryfeedauthoring = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeedauthoringtext = miXml.CreateTextNode("BOTH");
        fieldentryfeedauthoring.AppendChild(fieldentryfeedauthoringtext);
        qtimetadatafieldfeedauthoring.AppendChild(fieldentryfeedauthoring);

        XmlElement qtimetadatafieldfeeddeliverydate = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeeddeliverydate);
        XmlElement fieldlabelfeeddeliverydate = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeeddeliverydatetext = miXml.CreateTextNode("FEEDBACK_DELIVERY_DATE");
        fieldlabelfeeddeliverydate.AppendChild(fieldlabelfeeddeliverydatetext);
        qtimetadatafieldfeeddeliverydate.AppendChild(fieldlabelfeeddeliverydate);
        qtimetadatafieldfeeddeliverydate.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldeditfeeddelivery = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditfeeddelivery);
        XmlElement fieldlabeleditfeeddelivery = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditfeeddeliverytext = miXml.CreateTextNode("EDIT_FEEDBACK_DELIVERY");
        fieldlabeleditfeeddelivery.AppendChild(fieldlabeleditfeeddeliverytext);
        qtimetadatafieldeditfeeddelivery.AppendChild(fieldlabeleditfeeddelivery);
        XmlElement fieldentryeditfeeddelivery = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditfeeddeliverytext = miXml.CreateTextNode("True");
        fieldentryeditfeeddelivery.AppendChild(fieldentryeditfeeddeliverytext);
        qtimetadatafieldeditfeeddelivery.AppendChild(fieldentryeditfeeddelivery);

        XmlElement qtimetadatafieldeditfeedcomponents = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditfeedcomponents);
        XmlElement fieldlabeleditfeedcomponents = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditfeedcomponentstext = miXml.CreateTextNode("EDIT_FEEDBACK_COMPONENTS");
        fieldlabeleditfeedcomponents.AppendChild(fieldlabeleditfeedcomponentstext);
        qtimetadatafieldeditfeedcomponents.AppendChild(fieldlabeleditfeedcomponents);
        XmlElement fieldentryeditfeedcomponents = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditfeedcomponentstext = miXml.CreateTextNode("True");
        fieldentryeditfeedcomponents.AppendChild(fieldentryeditfeedcomponentstext);
        qtimetadatafieldeditfeedcomponents.AppendChild(fieldentryeditfeedcomponents);

        XmlElement qtimetadatafieldfeedshowcorrectresp = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeedshowcorrectresp);
        XmlElement fieldlabelfeedshowcorrectresp = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeedshowcorrectresptext = miXml.CreateTextNode("FEEDBACK_SHOW_CORRECT_RESPONSE");
        fieldlabelfeedshowcorrectresp.AppendChild(fieldlabelfeedshowcorrectresptext);
        qtimetadatafieldfeedshowcorrectresp.AppendChild(fieldlabelfeedshowcorrectresp);
        XmlElement fieldentryfeedshowcorrectresp = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeedshowcorrectresptext = miXml.CreateTextNode("False");
        fieldentryfeedshowcorrectresp.AppendChild(fieldentryfeedshowcorrectresptext);
        qtimetadatafieldfeedshowcorrectresp.AppendChild(fieldentryfeedshowcorrectresp);

        XmlElement qtimetadatafieldfeedshowstudentsc = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeedshowstudentsc);
        XmlElement fieldlabelfeedshowstudentsc = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeedshowstudentsctext = miXml.CreateTextNode("FEEDBACK_SHOW_STUDENT_SCORE");
        fieldlabelfeedshowstudentsc.AppendChild(fieldlabelfeedshowstudentsctext);
        qtimetadatafieldfeedshowstudentsc.AppendChild(fieldlabelfeedshowstudentsc);
        XmlElement fieldentryfeedshowstudentsc = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeedshowstudentsctext = miXml.CreateTextNode("False");
        fieldentryfeedshowstudentsc.AppendChild(fieldentryfeedshowstudentsctext);
        qtimetadatafieldfeedshowstudentsc.AppendChild(fieldentryfeedshowstudentsc);

        XmlElement qtimetadatafieldfeedshowstudentqsc = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeedshowstudentqsc);
        XmlElement fieldlabelfeedshowstudentqsc = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeedshowstudentqsctext = miXml.CreateTextNode("FEEDBACK_SHOW_STUDENT_QUESTIONSCORE");
        fieldlabelfeedshowstudentqsc.AppendChild(fieldlabelfeedshowstudentqsctext);
        qtimetadatafieldfeedshowstudentqsc.AppendChild(fieldlabelfeedshowstudentqsc);
        XmlElement fieldentryfeedshowstudentqsc = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeedshowstudentqsctext = miXml.CreateTextNode("False");
        fieldentryfeedshowstudentqsc.AppendChild(fieldentryfeedshowstudentqsctext);
        qtimetadatafieldfeedshowstudentqsc.AppendChild(fieldentryfeedshowstudentqsc);

        XmlElement qtimetadatafieldfeedshowitemlevel = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeedshowitemlevel);
        XmlElement fieldlabelfeedshowitemlevel = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeedshowitemleveltext = miXml.CreateTextNode("FEEDBACK_SHOW_ITEM_LEVEL");
        fieldlabelfeedshowitemlevel.AppendChild(fieldlabelfeedshowitemleveltext);
        qtimetadatafieldfeedshowitemlevel.AppendChild(fieldlabelfeedshowitemlevel);
        XmlElement fieldentryfeedshowitemlevel = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeedshowitemleveltext = miXml.CreateTextNode("False");
        fieldentryfeedshowitemlevel.AppendChild(fieldentryfeedshowitemleveltext);
        qtimetadatafieldfeedshowitemlevel.AppendChild(fieldentryfeedshowitemlevel);

        XmlElement qtimetadatafieldfeedshowseleclevel = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeedshowseleclevel);
        XmlElement fieldlabelfeedshowseleclevel = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeedshowselecleveltext = miXml.CreateTextNode("FEEDBACK_SHOW_SELECTION_LEVEL");
        fieldlabelfeedshowseleclevel.AppendChild(fieldlabelfeedshowselecleveltext);
        qtimetadatafieldfeedshowseleclevel.AppendChild(fieldlabelfeedshowseleclevel);
        XmlElement fieldentryfeedshowseleclevel = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeedshowselecleveltext = miXml.CreateTextNode("False");
        fieldentryfeedshowseleclevel.AppendChild(fieldentryfeedshowselecleveltext);
        qtimetadatafieldfeedshowseleclevel.AppendChild(fieldentryfeedshowseleclevel);

        XmlElement qtimetadatafieldfeedshowgradercomm = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeedshowgradercomm);
        XmlElement fieldlabelfeedshowgradercomm = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeedshowgradercommtext = miXml.CreateTextNode("FEEDBACK_SHOW_GRADER_COMMENT");
        fieldlabelfeedshowgradercomm.AppendChild(fieldlabelfeedshowgradercommtext);
        qtimetadatafieldfeedshowgradercomm.AppendChild(fieldlabelfeedshowgradercomm);
        XmlElement fieldentryfeedshowgradercomm = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeedshowgradercommtext = miXml.CreateTextNode("False");
        fieldentryfeedshowgradercomm.AppendChild(fieldentryfeedshowgradercommtext);
        qtimetadatafieldfeedshowgradercomm.AppendChild(fieldentryfeedshowgradercomm);

        XmlElement qtimetadatafieldfeedshowstats = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeedshowstats);
        XmlElement fieldlabelfeedshowstats = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeedshowstatstext = miXml.CreateTextNode("FEEDBACK_SHOW_STATS");
        fieldlabelfeedshowstats.AppendChild(fieldlabelfeedshowstatstext);
        qtimetadatafieldfeedshowstats.AppendChild(fieldlabelfeedshowstats);
        XmlElement fieldentryfeedshowstats = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeedshowstatstext = miXml.CreateTextNode("False");
        fieldentryfeedshowstats.AppendChild(fieldentryfeedshowstatstext);
        qtimetadatafieldfeedshowstats.AppendChild(fieldentryfeedshowstats);

        XmlElement qtimetadatafieldfeedshowquestion = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeedshowquestion);
        XmlElement fieldlabelfeedshowquestion = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeedshowquestiontext = miXml.CreateTextNode("FEEDBACK_SHOW_QUESTION");
        fieldlabelfeedshowquestion.AppendChild(fieldlabelfeedshowquestiontext);
        qtimetadatafieldfeedshowquestion.AppendChild(fieldlabelfeedshowquestion);
        XmlElement fieldentryfeedshowquestion = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeedshowquestiontext = miXml.CreateTextNode("True");
        fieldentryfeedshowquestion.AppendChild(fieldentryfeedshowquestiontext);
        qtimetadatafieldfeedshowquestion.AppendChild(fieldentryfeedshowquestion);

        XmlElement qtimetadatafieldfeedshowresponse = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeedshowresponse);
        XmlElement fieldlabelfeedshowresponse = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeedshowresponsetext = miXml.CreateTextNode("FEEDBACK_SHOW_RESPONSE");
        fieldlabelfeedshowresponse.AppendChild(fieldlabelfeedshowresponsetext);
        qtimetadatafieldfeedshowresponse.AppendChild(fieldlabelfeedshowresponse);
        XmlElement fieldentryfeedshowresponse = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeedshowresponsetext = miXml.CreateTextNode("False");
        fieldentryfeedshowresponse.AppendChild(fieldentryfeedshowresponsetext);
        qtimetadatafieldfeedshowresponse.AppendChild(fieldentryfeedshowresponse);

        XmlElement qtimetadatafieldanonymousgrading = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldanonymousgrading);
        XmlElement fieldlabelanonymousgrading = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelanonymousgradingtext = miXml.CreateTextNode("ANONYMOUS_GRADING");
        fieldlabelanonymousgrading.AppendChild(fieldlabelanonymousgradingtext);
        qtimetadatafieldanonymousgrading.AppendChild(fieldlabelanonymousgrading);
        XmlElement fieldentryanonymousgrading = miXml.CreateElement("fieldentry");
        XmlText fieldentryanonymousgradingtext = miXml.CreateTextNode("False");
        fieldentryanonymousgrading.AppendChild(fieldentryanonymousgradingtext);
        qtimetadatafieldanonymousgrading.AppendChild(fieldentryanonymousgrading);

        XmlElement qtimetadatafieldgradescore = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldgradescore);
        XmlElement fieldlabelgradescore = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelgradescoretext = miXml.CreateTextNode("GRADE_SCORE");
        fieldlabelgradescore.AppendChild(fieldlabelgradescoretext);
        qtimetadatafieldgradescore.AppendChild(fieldlabelgradescore);
        XmlElement fieldentrygradescore = miXml.CreateElement("fieldentry");
        XmlText fieldentrygradescoretext = miXml.CreateTextNode("HIGHEST_SCORE");
        fieldentrygradescore.AppendChild(fieldentrygradescoretext);
        qtimetadatafieldgradescore.AppendChild(fieldentrygradescore);

        XmlElement qtimetadatafieldgradebookopts = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldgradebookopts);
        XmlElement fieldlabelgradebookopts = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelgradebookoptstext = miXml.CreateTextNode("GRADEBOOK_OPTIONS");
        fieldlabelgradebookopts.AppendChild(fieldlabelgradebookoptstext);
        qtimetadatafieldgradebookopts.AppendChild(fieldlabelgradebookopts);
        XmlElement fieldentrygradebookopts = miXml.CreateElement("fieldentry");
        XmlText fieldentrygradebookoptstext = miXml.CreateTextNode("NONE");
        fieldentrygradebookopts.AppendChild(fieldentrygradebookoptstext);
        qtimetadatafieldgradebookopts.AppendChild(fieldentrygradebookopts);

        XmlElement qtimetadatafieldeditgradebookopts = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditgradebookopts);
        XmlElement fieldlabeleditgradebookopts = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditgradebookoptstext = miXml.CreateTextNode("EDIT_GRADEBOOK_OPTIONS");
        fieldlabeleditgradebookopts.AppendChild(fieldlabeleditgradebookoptstext);
        qtimetadatafieldeditgradebookopts.AppendChild(fieldlabeleditgradebookopts);
        XmlElement fieldentryeditgradebookopts = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditgradebookoptstext = miXml.CreateTextNode("True");
        fieldentryeditgradebookopts.AppendChild(fieldentryeditgradebookoptstext);
        qtimetadatafieldeditgradebookopts.AppendChild(fieldentryeditgradebookopts);

        XmlElement qtimetadatafieldeditanonymousgrading = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditanonymousgrading);
        XmlElement fieldlabeleditanonymousgrading = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditanonymousgradingtext = miXml.CreateTextNode("EDIT_ANONYMOUS_GRADING");
        fieldlabeleditanonymousgrading.AppendChild(fieldlabeleditanonymousgradingtext);
        qtimetadatafieldeditanonymousgrading.AppendChild(fieldlabeleditanonymousgrading);
        XmlElement fieldentryeditanonymousgrading = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditanonymousgradingtext = miXml.CreateTextNode("True");
        fieldentryeditanonymousgrading.AppendChild(fieldentryeditanonymousgradingtext);
        qtimetadatafieldeditanonymousgrading.AppendChild(fieldentryeditanonymousgrading);

        XmlElement qtimetadatafieldeditgradescore = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditgradescore);
        XmlElement fieldlabeleditgradescore = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditgradescoretext = miXml.CreateTextNode("EDIT_GRADE_SCORE");
        fieldlabeleditgradescore.AppendChild(fieldlabeleditgradescoretext);
        qtimetadatafieldeditgradescore.AppendChild(fieldlabeleditgradescore);
        XmlElement fieldentryeditgradescore = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditgradescoretext = miXml.CreateTextNode("True");
        fieldentryeditgradescore.AppendChild(fieldentryeditgradescoretext);
        qtimetadatafieldeditgradescore.AppendChild(fieldentryeditgradescore);

        XmlElement qtimetadatafieldbgcolor = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldbgcolor);
        XmlElement fieldlabelbgcolor = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelbgcolortext = miXml.CreateTextNode("BGCOLOR");
        fieldlabelbgcolor.AppendChild(fieldlabelbgcolortext);
        qtimetadatafieldbgcolor.AppendChild(fieldlabelbgcolor);
        qtimetadatafieldbgcolor.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldbgimg = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldbgimg);
        XmlElement fieldlabelbgimg = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelbgimgtext = miXml.CreateTextNode("BGIMG");
        fieldlabelbgimg.AppendChild(fieldlabelbgimgtext);
        qtimetadatafieldbgimg.AppendChild(fieldlabelbgimg);
        qtimetadatafieldbgimg.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldeditbgcolor = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditbgcolor);
        XmlElement fieldlabeleditbgcolor = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditbgcolortext = miXml.CreateTextNode("EDIT_BGCOLOR");
        fieldlabeleditbgcolor.AppendChild(fieldlabeleditbgcolortext);
        qtimetadatafieldeditbgcolor.AppendChild(fieldlabeleditbgcolor);
        XmlElement fieldentryeditbgcolor = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditbgcolortext = miXml.CreateTextNode("True");
        fieldentryeditbgcolor.AppendChild(fieldentryeditbgcolortext);
        qtimetadatafieldeditbgcolor.AppendChild(fieldentryeditbgcolor);

        XmlElement qtimetadatafieldeditbgimg = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditbgimg);
        XmlElement fieldlabeleditbgimg = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditbgimgtext = miXml.CreateTextNode("EDIT_BGIMG");
        fieldlabeleditbgimg.AppendChild(fieldlabeleditbgimgtext);
        qtimetadatafieldeditbgimg.AppendChild(fieldlabeleditbgimg);
        XmlElement fieldentryeditbgimg = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditbgimgtext = miXml.CreateTextNode("True");
        fieldentryeditbgimg.AppendChild(fieldentryeditbgimgtext);
        qtimetadatafieldeditbgimg.AppendChild(fieldentryeditbgimg);

        XmlElement qtimetadatafieldeditassessmetadata = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditassessmetadata);
        XmlElement fieldlabeleditassessmetadata = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditassessmetadatatext = miXml.CreateTextNode("EDIT_ASSESSMENT_METADATA");
        fieldlabeleditassessmetadata.AppendChild(fieldlabeleditassessmetadatatext);
        qtimetadatafieldeditassessmetadata.AppendChild(fieldlabeleditassessmetadata);
        XmlElement fieldentryeditassessmetadata = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditassessmetadatatext = miXml.CreateTextNode("True");
        fieldentryeditassessmetadata.AppendChild(fieldentryeditassessmetadatatext);
        qtimetadatafieldeditassessmetadata.AppendChild(fieldentryeditassessmetadata);

        XmlElement qtimetadatafieldeditcollsectionmetad = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditcollsectionmetad);
        XmlElement fieldlabeleditcollsectionmetad = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditcollsectionmetadtext = miXml.CreateTextNode("EDIT_COLLECT_SECTION_METADATA");
        fieldlabeleditcollsectionmetad.AppendChild(fieldlabeleditcollsectionmetadtext);
        qtimetadatafieldeditcollsectionmetad.AppendChild(fieldlabeleditcollsectionmetad);
        XmlElement fieldentryeditcollsectionmetad = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditcollsectionmetadtext = miXml.CreateTextNode("True");
        fieldentryeditcollsectionmetad.AppendChild(fieldentryeditcollsectionmetadtext);
        qtimetadatafieldeditcollsectionmetad.AppendChild(fieldentryeditcollsectionmetad);

        XmlElement qtimetadatafieldeditcollitemmetad = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldeditcollitemmetad);
        XmlElement fieldlabeleditcollitemmetad = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeleditcollitemmetadtext = miXml.CreateTextNode("EDIT_COLLECT_ITEM_METADATA");
        fieldlabeleditcollitemmetad.AppendChild(fieldlabeleditcollitemmetadtext);
        qtimetadatafieldeditcollitemmetad.AppendChild(fieldlabeleditcollitemmetad);
        XmlElement fieldentryeditcollitemmetad = miXml.CreateElement("fieldentry");
        XmlText fieldentryeditcollitemmetadtext = miXml.CreateTextNode("True");
        fieldentryeditcollitemmetad.AppendChild(fieldentryeditcollitemmetadtext);
        qtimetadatafieldeditcollitemmetad.AppendChild(fieldentryeditcollitemmetad);

        XmlElement qtimetadatafieldassesskeywords = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldassesskeywords);
        XmlElement fieldlabelassesskeywords = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelassesskeywordstext = miXml.CreateTextNode("ASSESSMENT_KEYWORDS");
        fieldlabelassesskeywords.AppendChild(fieldlabelassesskeywordstext);
        qtimetadatafieldassesskeywords.AppendChild(fieldlabelassesskeywords);
        qtimetadatafieldassesskeywords.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldassessobjectives = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldassessobjectives);
        XmlElement fieldlabelassessobjectives = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelassessobjectivestext = miXml.CreateTextNode("ASSESSMENT_OBJECTIVES");
        fieldlabelassessobjectives.AppendChild(fieldlabelassessobjectivestext);
        qtimetadatafieldassessobjectives.AppendChild(fieldlabelassessobjectives);
        qtimetadatafieldassessobjectives.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldassessrubrics = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldassessrubrics);
        XmlElement fieldlabelassessrubrics = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelassessrubricstext = miXml.CreateTextNode("ASSESSMENT_RUBRICS");
        fieldlabelassessrubrics.AppendChild(fieldlabelassessrubricstext);
        qtimetadatafieldassessrubrics.AppendChild(fieldlabelassessrubrics);
        qtimetadatafieldassessrubrics.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldcollsectionmetad = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldcollsectionmetad);
        XmlElement fieldlabelcollsectionmetad = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelcollsectionmetadtext = miXml.CreateTextNode("COLLECT_SECTION_METADATA");
        fieldlabelcollsectionmetad.AppendChild(fieldlabelcollsectionmetadtext);
        qtimetadatafieldcollsectionmetad.AppendChild(fieldlabelcollsectionmetad);
        XmlElement fieldentrycollsectionmetad = miXml.CreateElement("fieldentry");
        XmlText fieldentrycollsectionmetadtext = miXml.CreateTextNode("False");
        fieldentrycollsectionmetad.AppendChild(fieldentrycollsectionmetadtext);
        qtimetadatafieldcollsectionmetad.AppendChild(fieldentrycollsectionmetad);

        XmlElement qtimetadatafieldcollitemmeta = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldcollitemmeta);
        XmlElement fieldlabelcollitemmeta = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelcollitemmetatext = miXml.CreateTextNode("COLLECT_ITEM_METADATA");
        fieldlabelcollitemmeta.AppendChild(fieldlabelcollitemmetatext);
        qtimetadatafieldcollitemmeta.AppendChild(fieldlabelcollitemmeta);
        qtimetadatafieldcollitemmeta.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldlastmodifiedon = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldlastmodifiedon);
        XmlElement fieldlabellastmodifiedon = miXml.CreateElement("fieldlabel");
        XmlText fieldlabellastmodifiedontext = miXml.CreateTextNode("LAST_MODIFIED_ON");
        fieldlabellastmodifiedon.AppendChild(fieldlabellastmodifiedontext);
        qtimetadatafieldlastmodifiedon.AppendChild(fieldlabellastmodifiedon);
        qtimetadatafieldlastmodifiedon.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldlastmodifiedby = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldlastmodifiedby);
        XmlElement fieldlabellastmodifiedby = miXml.CreateElement("fieldlabel");
        XmlText fieldlabellastmodifiedbytext = miXml.CreateTextNode("LAST_MODIFIED_BY");
        fieldlabellastmodifiedby.AppendChild(fieldlabellastmodifiedbytext);
        qtimetadatafieldlastmodifiedby.AppendChild(fieldlabellastmodifiedby);
        qtimetadatafieldlastmodifiedby.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldtemplinfoinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldtemplinfoinstructedit);
        XmlElement fieldlabeltemplinfoinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeltemplinfoinstructedittext = miXml.CreateTextNode("templateInfo_isInstructorEditable");
        fieldlabeltemplinfoinstructedit.AppendChild(fieldlabeltemplinfoinstructedittext);
        qtimetadatafieldtemplinfoinstructedit.AppendChild(fieldlabeltemplinfoinstructedit);
        XmlElement fieldentrytemplinfoinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrytemplinfoinstructedittext = miXml.CreateTextNode("true");
        fieldentrytemplinfoinstructedit.AppendChild(fieldentrytemplinfoinstructedittext);
        qtimetadatafieldtemplinfoinstructedit.AppendChild(fieldentrytemplinfoinstructedit);

        XmlElement qtimetadatafieldassessauthoinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldassessauthoinstructedit);
        XmlElement fieldlabelassessauthoinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelassessauthoinstructedittext = miXml.CreateTextNode("assessmentAuthor_isInstructorEditable");
        fieldlabelassessauthoinstructedit.AppendChild(fieldlabelassessauthoinstructedittext);
        qtimetadatafieldassessauthoinstructedit.AppendChild(fieldlabelassessauthoinstructedit);
        XmlElement fieldentryassessauthoinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentryassessauthoinstructedittext = miXml.CreateTextNode("true");
        fieldentryassessauthoinstructedit.AppendChild(fieldentryassessauthoinstructedittext);
        qtimetadatafieldassessauthoinstructedit.AppendChild(fieldentryassessauthoinstructedit);

        XmlElement qtimetadatafieldassesscreatoinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldassesscreatoinstructedit);
        XmlElement fieldlabelassesscreatoinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelassesscreatoinstructedittext = miXml.CreateTextNode("assessmentCreator_isInstructorEditable");
        fieldlabelassesscreatoinstructedit.AppendChild(fieldlabelassesscreatoinstructedittext);
        qtimetadatafieldassesscreatoinstructedit.AppendChild(fieldlabelassesscreatoinstructedit);
        qtimetadatafieldassesscreatoinstructedit.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafielddescriptinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafielddescriptinstructedit);
        XmlElement fieldlabeldescriptinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeldescriptinstructedittext = miXml.CreateTextNode("description_isInstructorEditable");
        fieldlabeldescriptinstructedit.AppendChild(fieldlabeldescriptinstructedittext);
        qtimetadatafielddescriptinstructedit.AppendChild(fieldlabeldescriptinstructedit);
        XmlElement fieldentrydescriptinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrydescriptinstructedittext = miXml.CreateTextNode("true");
        fieldentrydescriptinstructedit.AppendChild(fieldentrydescriptinstructedittext);
        qtimetadatafielddescriptinstructedit.AppendChild(fieldentrydescriptinstructedit);

        XmlElement qtimetadatafieldduedateinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldduedateinstructedit);
        XmlElement fieldlabelduedateinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelduedateinstructedittext = miXml.CreateTextNode("dueDate_isInstructorEditable");
        fieldlabelduedateinstructedit.AppendChild(fieldlabelduedateinstructedittext);
        qtimetadatafieldduedateinstructedit.AppendChild(fieldlabelduedateinstructedit);
        XmlElement fieldentryduedateinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentryduedateinstructedittext = miXml.CreateTextNode("true");
        fieldentryduedateinstructedit.AppendChild(fieldentryduedateinstructedittext);
        qtimetadatafieldduedateinstructedit.AppendChild(fieldentryduedateinstructedit);

        XmlElement qtimetadatafieldretractdateinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldretractdateinstructedit);
        XmlElement fieldlabelretractdateinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelretractdateinstructedittext = miXml.CreateTextNode("retractDate_isInstructorEditable");
        fieldlabelretractdateinstructedit.AppendChild(fieldlabelretractdateinstructedittext);
        qtimetadatafieldretractdateinstructedit.AppendChild(fieldlabelretractdateinstructedit);
        XmlElement fieldentryretractdateinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentryretractdateinstructedittext = miXml.CreateTextNode("true");
        fieldentryretractdateinstructedit.AppendChild(fieldentryretractdateinstructedittext);
        qtimetadatafieldretractdateinstructedit.AppendChild(fieldentryretractdateinstructedit);

        XmlElement qtimetadatafieldanonyreleasinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldanonyreleasinstructedit);
        XmlElement fieldlabelanonyreleasinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelanonyreleasinstructedittext = miXml.CreateTextNode("anonymousRelease_isInstructorEditable");
        fieldlabelanonyreleasinstructedit.AppendChild(fieldlabelanonyreleasinstructedittext);
        qtimetadatafieldanonyreleasinstructedit.AppendChild(fieldlabelanonyreleasinstructedit);
        XmlElement fieldentryanonyreleasinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentryanonyreleasinstructedittext = miXml.CreateTextNode("true");
        fieldentryanonyreleasinstructedit.AppendChild(fieldentryanonyreleasinstructedittext);
        qtimetadatafieldanonyreleasinstructedit.AppendChild(fieldentryanonyreleasinstructedit);

        XmlElement qtimetadatafieldauthereleasinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldauthereleasinstructedit);
        XmlElement fieldlabelauthereleasinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelauthereleasinstructedittext = miXml.CreateTextNode("authenticatedRelease_isInstructorEditable");
        fieldlabelauthereleasinstructedit.AppendChild(fieldlabelauthereleasinstructedittext);
        qtimetadatafieldauthereleasinstructedit.AppendChild(fieldlabelauthereleasinstructedit);
        XmlElement fieldentryauthereleasinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentryauthereleasinstructedittext = miXml.CreateTextNode("true");
        fieldentryauthereleasinstructedit.AppendChild(fieldentryauthereleasinstructedittext);
        qtimetadatafieldauthereleasinstructedit.AppendChild(fieldentryauthereleasinstructedit);

        XmlElement qtimetadatafieldipaccetypinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldipaccetypinstructedit);
        XmlElement fieldlabelipaccetypinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelipaccetypinstructedittext = miXml.CreateTextNode("ipAccessType_isInstructorEditable");
        fieldlabelipaccetypinstructedit.AppendChild(fieldlabelipaccetypinstructedittext);
        qtimetadatafieldipaccetypinstructedit.AppendChild(fieldlabelipaccetypinstructedit);
        XmlElement fieldentryipaccetypinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentryipaccetypinstructedittext = miXml.CreateTextNode("true");
        fieldentryipaccetypinstructedit.AppendChild(fieldentryipaccetypinstructedittext);
        qtimetadatafieldipaccetypinstructedit.AppendChild(fieldentryipaccetypinstructedit);

        XmlElement qtimetadatafieldpassrequinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldpassrequinstructedit);
        XmlElement fieldlabelpassrequinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelpassrequinstructedittext = miXml.CreateTextNode("passwordRequired_isInstructorEditable");
        fieldlabelpassrequinstructedit.AppendChild(fieldlabelpassrequinstructedittext);
        qtimetadatafieldpassrequinstructedit.AppendChild(fieldlabelpassrequinstructedit);
        XmlElement fieldentrypassrequinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrypassrequinstructedittext = miXml.CreateTextNode("true");
        fieldentrypassrequinstructedit.AppendChild(fieldentrypassrequinstructedittext);
        qtimetadatafieldpassrequinstructedit.AppendChild(fieldentrypassrequinstructedit);

        XmlElement qtimetadatafieldlockbrowsinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldlockbrowsinstructedit);
        XmlElement fieldlabellockbrowsinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabellockbrowsinstructedittext = miXml.CreateTextNode("lockedBrowser_isInstructorEditable");
        fieldlabellockbrowsinstructedit.AppendChild(fieldlabellockbrowsinstructedittext);
        qtimetadatafieldlockbrowsinstructedit.AppendChild(fieldlabellockbrowsinstructedit);
        XmlElement fieldentrylockbrowsinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrylockbrowsinstructedittext = miXml.CreateTextNode("true");
        fieldentrylockbrowsinstructedit.AppendChild(fieldentrylockbrowsinstructedittext);
        qtimetadatafieldlockbrowsinstructedit.AppendChild(fieldentrylockbrowsinstructedit);

        XmlElement qtimetadatafieldtimeassessinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldtimeassessinstructedit);
        XmlElement fieldlabeltimeassessinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeltimeassessinstructedittext = miXml.CreateTextNode("timedAssessment_isInstructorEditable");
        fieldlabeltimeassessinstructedit.AppendChild(fieldlabeltimeassessinstructedittext);
        qtimetadatafieldtimeassessinstructedit.AppendChild(fieldlabeltimeassessinstructedit);
        XmlElement fieldentrytimeassessinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrytimeassessinstructedittext = miXml.CreateTextNode("true");
        fieldentrytimeassessinstructedit.AppendChild(fieldentrytimeassessinstructedittext);
        qtimetadatafieldtimeassessinstructedit.AppendChild(fieldentrytimeassessinstructedit);

        XmlElement qtimetadatafieldtimeassessautosubminstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldtimeassessautosubminstructedit);
        XmlElement fieldlabeltimeassessautosubminstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeltimeassessautosubminstructedittext = miXml.CreateTextNode("timedAssessmentAutoSubmit_isInstructorEditable");
        fieldlabeltimeassessautosubminstructedit.AppendChild(fieldlabeltimeassessautosubminstructedittext);
        qtimetadatafieldtimeassessautosubminstructedit.AppendChild(fieldlabeltimeassessautosubminstructedit);
        XmlElement fieldentrytimeassessautosubminstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrytimeassessautosubminstructedittext = miXml.CreateTextNode("true");
        fieldentrytimeassessautosubminstructedit.AppendChild(fieldentrytimeassessautosubminstructedittext);
        qtimetadatafieldtimeassessautosubminstructedit.AppendChild(fieldentrytimeassessautosubminstructedit);

        XmlElement qtimetadatafielditemaccetypinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafielditemaccetypinstructedit);
        XmlElement fieldlabelitemaccetypinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelitemaccetypinstructedittext = miXml.CreateTextNode("itemAccessType_isInstructorEditable");
        fieldlabelitemaccetypinstructedit.AppendChild(fieldlabelitemaccetypinstructedittext);
        qtimetadatafielditemaccetypinstructedit.AppendChild(fieldlabelitemaccetypinstructedit);
        XmlElement fieldentryitemaccetypinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentryitemaccetypinstructedittext = miXml.CreateTextNode("true");
        fieldentryitemaccetypinstructedit.AppendChild(fieldentryitemaccetypinstructedittext);
        qtimetadatafielditemaccetypinstructedit.AppendChild(fieldentryitemaccetypinstructedit);

        XmlElement qtimetadatafielddisplchunkinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafielddisplchunkinstructedit);
        XmlElement fieldlabeldisplchunkinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeldisplchunkinstructedittext = miXml.CreateTextNode("displayChunking_isInstructorEditable");
        fieldlabeldisplchunkinstructedit.AppendChild(fieldlabelitemaccetypinstructedittext);
        qtimetadatafielddisplchunkinstructedit.AppendChild(fieldlabeldisplchunkinstructedit);
        XmlElement fieldentrydisplchunkinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrydisplchunkinstructedittext = miXml.CreateTextNode("true");
        fieldentrydisplchunkinstructedit.AppendChild(fieldentrydisplchunkinstructedittext);
        qtimetadatafielddisplchunkinstructedit.AppendChild(fieldentrydisplchunkinstructedit);

        XmlElement qtimetadatafielddisplnumbinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafielddisplnumbinstructedit);
        XmlElement fieldlabeldisplnumbinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeldisplnumbinstructedittext = miXml.CreateTextNode("displayNumbering_isInstructorEditable");
        fieldlabeldisplnumbinstructedit.AppendChild(fieldlabeldisplnumbinstructedittext);
        qtimetadatafielddisplnumbinstructedit.AppendChild(fieldlabeldisplnumbinstructedit);
        XmlElement fieldentrydisplnumbinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrydisplnumbinstructedittext = miXml.CreateTextNode("true");
        fieldentrydisplnumbinstructedit.AppendChild(fieldentrydisplnumbinstructedittext);
        qtimetadatafielddisplnumbinstructedit.AppendChild(fieldentrydisplnumbinstructedit);

        XmlElement qtimetadatafieldsubmmodelinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldsubmmodelinstructedit);
        XmlElement fieldlabelsubmmodelinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsubmmodelinstructedittext = miXml.CreateTextNode("submissionModel_isInstructorEditable");
        fieldlabelsubmmodelinstructedit.AppendChild(fieldlabelsubmmodelinstructedittext);
        qtimetadatafieldsubmmodelinstructedit.AppendChild(fieldlabelsubmmodelinstructedit);
        XmlElement fieldentrysubmmodelinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrysubmmodelinstructedittext = miXml.CreateTextNode("true");
        fieldentrysubmmodelinstructedit.AppendChild(fieldentrysubmmodelinstructedittext);
        qtimetadatafieldsubmmodelinstructedit.AppendChild(fieldentrysubmmodelinstructedit);

        XmlElement qtimetadatafieldlatehandlinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldlatehandlinstructedit);
        XmlElement fieldlabellatehandlinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabellatehandlinstructedittext = miXml.CreateTextNode("lateHandling_isInstructorEditable");
        fieldlabellatehandlinstructedit.AppendChild(fieldlabellatehandlinstructedittext);
        qtimetadatafieldlatehandlinstructedit.AppendChild(fieldlabellatehandlinstructedit);
        XmlElement fieldentrylatehandlinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrylatehandlinstructedittext = miXml.CreateTextNode("true");
        fieldentrylatehandlinstructedit.AppendChild(fieldentrylatehandlinstructedittext);
        qtimetadatafieldlatehandlinstructedit.AppendChild(fieldentrylatehandlinstructedit);

        XmlElement qtimetadatafieldautosubminstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldautosubminstructedit);
        XmlElement fieldlabelautosubminstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelautosubminstructedittext = miXml.CreateTextNode("automaticSubmission_isInstructorEditable");
        fieldlabelautosubminstructedit.AppendChild(fieldlabelautosubminstructedittext);
        qtimetadatafieldautosubminstructedit.AppendChild(fieldlabelautosubminstructedit);
        XmlElement fieldentryautosubminstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentryautosubminstructedittext = miXml.CreateTextNode("true");
        fieldentryautosubminstructedit.AppendChild(fieldentryautosubminstructedittext);
        qtimetadatafieldautosubminstructedit.AppendChild(fieldentryautosubminstructedit);

        XmlElement qtimetadatafieldautosaveinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldautosaveinstructedit);
        XmlElement fieldlabelautosaveinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelautosaveinstructedittext = miXml.CreateTextNode("autoSave_isInstructorEditable");
        fieldlabelautosaveinstructedit.AppendChild(fieldlabelautosaveinstructedittext);
        qtimetadatafieldautosaveinstructedit.AppendChild(fieldlabelautosaveinstructedit);
        qtimetadatafieldautosaveinstructedit.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldsubmmessainstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldsubmmessainstructedit);
        XmlElement fieldlabelsubmmessainstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsubmmessainstructedittext = miXml.CreateTextNode("submissionMessage_isInstructorEditable");
        fieldlabelsubmmessainstructedit.AppendChild(fieldlabelsubmmessainstructedittext);
        qtimetadatafieldsubmmessainstructedit.AppendChild(fieldlabelsubmmessainstructedit);
        XmlElement fieldentrysubmmessainstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrysubmmessainstructedittext = miXml.CreateTextNode("true");
        fieldentrysubmmessainstructedit.AppendChild(fieldentrysubmmessainstructedittext);
        qtimetadatafieldsubmmessainstructedit.AppendChild(fieldentrysubmmessainstructedit);

        XmlElement qtimetadatafieldfinpageurlinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfinpageurlinstructedit);
        XmlElement fieldlabelfinpageurlinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfinpageurlinstructedittext = miXml.CreateTextNode("finalPageURL_isInstructorEditable");
        fieldlabelfinpageurlinstructedit.AppendChild(fieldlabelfinpageurlinstructedittext);
        qtimetadatafieldfinpageurlinstructedit.AppendChild(fieldlabelfinpageurlinstructedit);
        XmlElement fieldentryfinpageurlinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentryfinpageurlinstructedittext = miXml.CreateTextNode("true");
        fieldentryfinpageurlinstructedit.AppendChild(fieldentryfinpageurlinstructedittext);
        qtimetadatafieldfinpageurlinstructedit.AppendChild(fieldentryfinpageurlinstructedit);

        XmlElement qtimetadatafieldfeedbtypinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeedbtypinstructedit);
        XmlElement fieldlabelfeedbtypinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeedbtypinstructedittext = miXml.CreateTextNode("feedbackType_isInstructorEditable");
        fieldlabelfeedbtypinstructedit.AppendChild(fieldlabelfeedbtypinstructedittext);
        qtimetadatafieldfeedbtypinstructedit.AppendChild(fieldlabelfeedbtypinstructedit);
        XmlElement fieldentryfeedbtypinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeedbtypinstructedittext = miXml.CreateTextNode("true");
        fieldentryfeedbtypinstructedit.AppendChild(fieldentryfeedbtypinstructedittext);
        qtimetadatafieldfeedbtypinstructedit.AppendChild(fieldentryfeedbtypinstructedit);

        XmlElement qtimetadatafieldfeedbcompoinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldfeedbcompoinstructedit);
        XmlElement fieldlabelfeedbcompoinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelfeedbcompoinstructedittext = miXml.CreateTextNode("feedbackComponents_isInstructorEditable");
        fieldlabelfeedbcompoinstructedit.AppendChild(fieldlabelfeedbcompoinstructedittext);
        qtimetadatafieldfeedbcompoinstructedit.AppendChild(fieldlabelfeedbcompoinstructedit);
        XmlElement fieldentryfeedbcompoinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentryfeedbcompoinstructedittext = miXml.CreateTextNode("true");
        fieldentryfeedbcompoinstructedit.AppendChild(fieldentryfeedbcompoinstructedittext);
        qtimetadatafieldfeedbcompoinstructedit.AppendChild(fieldentryfeedbcompoinstructedit);

        XmlElement qtimetadatafieldtesteeidinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldtesteeidinstructedit);
        XmlElement fieldlabeltesteeidinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeltesteeidinstructedittext = miXml.CreateTextNode("testeeIdentity_isInstructorEditable");
        fieldlabeltesteeidinstructedit.AppendChild(fieldlabeltesteeidinstructedittext);
        qtimetadatafieldtesteeidinstructedit.AppendChild(fieldlabeltesteeidinstructedit);
        XmlElement fieldentrytesteeidinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrytesteeidinstructedittext = miXml.CreateTextNode("true");
        fieldentrytesteeidinstructedit.AppendChild(fieldentrytesteeidinstructedittext);
        qtimetadatafieldtesteeidinstructedit.AppendChild(fieldentrytesteeidinstructedit);

        XmlElement qtimetadatafieldtogradbookinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldtogradbookinstructedit);
        XmlElement fieldlabeltogradbookinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabeltogradbookinstructedittext = miXml.CreateTextNode("toGradebook_isInstructorEditable");
        fieldlabeltogradbookinstructedit.AppendChild(fieldlabeltogradbookinstructedittext);
        qtimetadatafieldtogradbookinstructedit.AppendChild(fieldlabeltogradbookinstructedit);
        XmlElement fieldentrytogradbookinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrytogradbookinstructedittext = miXml.CreateTextNode("true");
        fieldentrytogradbookinstructedit.AppendChild(fieldentrytogradbookinstructedittext);
        qtimetadatafieldtogradbookinstructedit.AppendChild(fieldentrytogradbookinstructedit);

        XmlElement qtimetadatafieldrecdsoreinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldrecdsoreinstructedit);
        XmlElement fieldlabelrecdsoreinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelrecdsoreinstructedittext = miXml.CreateTextNode("recordedScore_isInstructorEditable");
        fieldlabelrecdsoreinstructedit.AppendChild(fieldlabelrecdsoreinstructedittext);
        qtimetadatafieldrecdsoreinstructedit.AppendChild(fieldlabelrecdsoreinstructedit);
        XmlElement fieldentryrecdsoreinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentryrecdsoreinstructedittext = miXml.CreateTextNode("true");
        fieldentryrecdsoreinstructedit.AppendChild(fieldentryrecdsoreinstructedittext);
        qtimetadatafieldrecdsoreinstructedit.AppendChild(fieldentryrecdsoreinstructedit);

        XmlElement qtimetadatafieldbgcolorinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldbgcolorinstructedit);
        XmlElement fieldlabelbgcolorinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelbgcolorinstructedittext = miXml.CreateTextNode("bgColor_isInstructorEditable");
        fieldlabelbgcolorinstructedit.AppendChild(fieldlabelbgcolorinstructedittext);
        qtimetadatafieldbgcolorinstructedit.AppendChild(fieldlabelbgcolorinstructedit);
        XmlElement fieldentrybgcolorinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrybgcolorinstructedittext = miXml.CreateTextNode("true");
        fieldentrybgcolorinstructedit.AppendChild(fieldentrybgcolorinstructedittext);
        qtimetadatafieldbgcolorinstructedit.AppendChild(fieldentrybgcolorinstructedit);

        XmlElement qtimetadatafieldbgimageinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldbgimageinstructedit);
        XmlElement fieldlabelbgimageinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelbgimageinstructedittext = miXml.CreateTextNode("bgImage_isInstructorEditable");
        fieldlabelbgimageinstructedit.AppendChild(fieldlabelbgimageinstructedittext);
        qtimetadatafieldbgimageinstructedit.AppendChild(fieldlabelbgimageinstructedit);
        XmlElement fieldentrybgimageinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrybgimageinstructedittext = miXml.CreateTextNode("true");
        fieldentrybgimageinstructedit.AppendChild(fieldentrybgimageinstructedittext);
        qtimetadatafieldbgimageinstructedit.AppendChild(fieldentrybgimageinstructedit);

        XmlElement qtimetadatafieldmetadaassessinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldmetadaassessinstructedit);
        XmlElement fieldlabelmetadaassessinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelmetadaassessinstructedittext = miXml.CreateTextNode("metadataAssess_isInstructorEditable");
        fieldlabelmetadaassessinstructedit.AppendChild(fieldlabelmetadaassessinstructedittext);
        qtimetadatafieldmetadaassessinstructedit.AppendChild(fieldlabelmetadaassessinstructedit);
        XmlElement fieldentrymetadaassessinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrymetadaassessinstructedittext = miXml.CreateTextNode("true");
        fieldentrymetadaassessinstructedit.AppendChild(fieldentrymetadaassessinstructedittext);
        qtimetadatafieldmetadaassessinstructedit.AppendChild(fieldentrymetadaassessinstructedit);

        XmlElement qtimetadatafieldmetadapartsinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldmetadapartsinstructedit);
        XmlElement fieldlabelmetadapartsinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelmetadapartsinstructedittext = miXml.CreateTextNode("metadataParts_isInstructorEditable");
        fieldlabelmetadapartsinstructedit.AppendChild(fieldlabelmetadapartsinstructedittext);
        qtimetadatafieldmetadapartsinstructedit.AppendChild(fieldlabelmetadapartsinstructedit);
        qtimetadatafieldmetadapartsinstructedit.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatafieldmetadaquestsinstructedit = miXml.CreateElement("qtimetadatafield");
        qtimetadata.AppendChild(qtimetadatafieldmetadaquestsinstructedit);
        XmlElement fieldlabelmetadaquestsinstructedit = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelmetadaquestsinstructedittext = miXml.CreateTextNode("metadataQuestions_isInstructorEditable");
        fieldlabelmetadaquestsinstructedit.AppendChild(fieldlabelmetadaquestsinstructedittext);
        qtimetadatafieldmetadaquestsinstructedit.AppendChild(fieldlabelmetadaquestsinstructedit);
        XmlElement fieldentrymetadaquestsinstructedit = miXml.CreateElement("fieldentry");
        XmlText fieldentrymetadaquestsinstructedittext = miXml.CreateTextNode("true");
        fieldentrymetadaquestsinstructedit.AppendChild(fieldentrymetadaquestsinstructedittext);
        qtimetadatafieldmetadaquestsinstructedit.AppendChild(fieldentrymetadaquestsinstructedit);

        XmlElement assessmentcontrol = miXml.CreateElement("assessmentcontrol");
        XmlAttribute assessmentcontrolfeedbackswitch = miXml.CreateAttribute("feedbackswitch");
        assessmentcontrolfeedbackswitch.Value = "Yes";
        assessmentcontrol.Attributes.Append(assessmentcontrolfeedbackswitch);
        XmlAttribute assessmentcontrolhintswitch = miXml.CreateAttribute("hintswitch");
        assessmentcontrolhintswitch.Value = "Yes";
        assessmentcontrol.Attributes.Append(assessmentcontrolhintswitch);
        XmlAttribute assessmentcontrolsolutionswitch = miXml.CreateAttribute("solutionswitch");
        assessmentcontrolsolutionswitch.Value = "Yes";
        assessmentcontrol.Attributes.Append(assessmentcontrolsolutionswitch);
        XmlAttribute assessmentcontrolview = miXml.CreateAttribute("view");
        assessmentcontrolview.Value = "All";
        assessmentcontrol.Attributes.Append(assessmentcontrolview);
        assessment.AppendChild(assessmentcontrol);

        XmlElement rubric = miXml.CreateElement("rubric");
        XmlAttribute rubricview = miXml.CreateAttribute("view");
        rubricview.Value = "All";
        rubric.Attributes.Append(rubricview);
        assessment.AppendChild(rubric);

        XmlElement rubricmaterial = miXml.CreateElement("material");
        rubric.AppendChild(rubricmaterial);

        XmlElement rubricmaterialmattext = miXml.CreateElement("mattext");
        XmlAttribute rubricmaterialmattextcharset = miXml.CreateAttribute("charset");
        rubricmaterialmattextcharset.Value = "ascii-us";
        rubricmaterialmattext.Attributes.Append(rubricmaterialmattextcharset);
        XmlAttribute rubricmaterialmattexttexttype = miXml.CreateAttribute("texttype");
        rubricmaterialmattexttexttype.Value = "text/plain";
        rubricmaterialmattext.Attributes.Append(rubricmaterialmattexttexttype);
        XmlAttribute rubricmaterialmattextxmlspace = miXml.CreateAttribute("xml:space");
        rubricmaterialmattextxmlspace.Value = "default";
        rubricmaterialmattext.Attributes.Append(rubricmaterialmattextxmlspace);
        rubricmaterial.AppendChild(rubricmaterialmattext);

        XmlElement presentationmaterial = miXml.CreateElement("presentation_material");
        assessment.AppendChild(presentationmaterial);

        XmlElement flowmatpresentationmaterial = miXml.CreateElement("flow_mat");
        XmlAttribute flowmatpresentationmaterialclass = miXml.CreateAttribute("class");
        flowmatpresentationmaterialclass.Value = "Block";
        flowmatpresentationmaterial.Attributes.Append(flowmatpresentationmaterialclass);
        presentationmaterial.AppendChild(flowmatpresentationmaterial);

        XmlElement flowmatpmmaterial = miXml.CreateElement("material");
        flowmatpresentationmaterial.AppendChild(flowmatpmmaterial);

        XmlElement flowmatpmmaterialmattext = miXml.CreateElement("mattext");
        XmlAttribute flowmatpmmaterialmattextcharset = miXml.CreateAttribute("charset");
        flowmatpmmaterialmattextcharset.Value = "ascii-us";
        flowmatpmmaterialmattext.Attributes.Append(flowmatpmmaterialmattextcharset);
        XmlAttribute flowmatpmmaterialmattexttexttype = miXml.CreateAttribute("texttype");
        flowmatpmmaterialmattexttexttype.Value = "text/plain";
        flowmatpmmaterialmattext.Attributes.Append(flowmatpmmaterialmattexttexttype);
        XmlAttribute flowmatpmmaterialmattextxmlspace = miXml.CreateAttribute("xml:space");
        flowmatpmmaterialmattextxmlspace.Value = "default";
        flowmatpmmaterialmattext.Attributes.Append(flowmatpmmaterialmattextxmlspace);
        XmlCDataSection flowmatpmmaterialmattextcdata;
        flowmatpmmaterialmattextcdata = miXml.CreateCDataSection(" ");
        flowmatpmmaterialmattext.AppendChild(flowmatpmmaterialmattextcdata);
        flowmatpmmaterial.AppendChild(flowmatpmmaterialmattext);

        XmlElement assessfeedback = miXml.CreateElement("assessfeedback");
        XmlAttribute assessfeedbackident = miXml.CreateAttribute("ident");
        assessfeedbackident.Value = "Feedback";
        assessfeedback.Attributes.Append(assessfeedbackident);
        XmlAttribute assessfeedbacktitle = miXml.CreateAttribute("title");
        assessfeedbacktitle.Value = "Feedback";
        assessfeedback.Attributes.Append(assessfeedbacktitle);
        XmlAttribute assessfeedbackview = miXml.CreateAttribute("view");
        assessfeedbackview.Value = "All";
        assessfeedback.Attributes.Append(assessfeedbackview);
        assessment.AppendChild(assessfeedback);

        XmlElement flowmatassessfeedback = miXml.CreateElement("flow_mat");
        XmlAttribute flowmatassessfeedbackclass = miXml.CreateAttribute("class");
        flowmatassessfeedbackclass.Value = "Block";
        flowmatassessfeedback.Attributes.Append(flowmatassessfeedbackclass);
        assessfeedback.AppendChild(flowmatassessfeedback);

        XmlElement flowmatafmaterial = miXml.CreateElement("material");
        flowmatassessfeedback.AppendChild(flowmatafmaterial);

        XmlElement flowmatafmaterialmattext = miXml.CreateElement("mattext");
        XmlAttribute flowmatafmaterialmattextcharset = miXml.CreateAttribute("charset");
        flowmatafmaterialmattextcharset.Value = "ascii-us";
        flowmatafmaterialmattext.Attributes.Append(flowmatafmaterialmattextcharset);
        XmlAttribute flowmatafmaterialmattexttexttype = miXml.CreateAttribute("texttype");
        flowmatafmaterialmattexttexttype.Value = "text/plain";
        flowmatafmaterialmattext.Attributes.Append(flowmatafmaterialmattexttexttype);
        XmlAttribute flowmatafmaterialmattextxmlspace = miXml.CreateAttribute("xml:space");
        flowmatafmaterialmattextxmlspace.Value = "default";
        flowmatafmaterialmattext.Attributes.Append(flowmatafmaterialmattextxmlspace);
        flowmatafmaterial.AppendChild(flowmatafmaterialmattext);

        XmlElement section = miXml.CreateElement("section");
        XmlAttribute sectionident = miXml.CreateAttribute("ident");
        sectionident.Value = "621422";
        section.Attributes.Append(sectionident);
        XmlAttribute sectiontitle = miXml.CreateAttribute("title");
        sectiontitle.Value = "Default";
        section.Attributes.Append(sectiontitle);
        assessment.AppendChild(section);

        XmlElement sectionqtimetad = miXml.CreateElement("qtimetadata");
        section.AppendChild(sectionqtimetad);

        XmlElement qtimetadatasectioninfo = miXml.CreateElement("qtimetadatafield");
        sectionqtimetad.AppendChild(qtimetadatasectioninfo);
        XmlElement fieldlabelsectioninfo = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsectioninfotext = miXml.CreateTextNode("SECTION_INFORMATION");
        fieldlabelsectioninfo.AppendChild(fieldlabelsectioninfotext);
        qtimetadatasectioninfo.AppendChild(fieldlabelsectioninfo);
        qtimetadatasectioninfo.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatasectionobjecti = miXml.CreateElement("qtimetadatafield");
        sectionqtimetad.AppendChild(qtimetadatasectionobjecti);
        XmlElement fieldlabelsectionobjecti = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsectionobjectitext = miXml.CreateTextNode("SECTION_OBJECTIVE");
        fieldlabelsectionobjecti.AppendChild(fieldlabelsectionobjectitext);
        qtimetadatasectionobjecti.AppendChild(fieldlabelsectionobjecti);
        qtimetadatasectionobjecti.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatasectionkeywo = miXml.CreateElement("qtimetadatafield");
        sectionqtimetad.AppendChild(qtimetadatasectionkeywo);
        XmlElement fieldlabelsectionkeywo = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsectionokeywotext = miXml.CreateTextNode("SECTION_KEYWORD");
        fieldlabelsectionkeywo.AppendChild(fieldlabelsectionokeywotext);
        qtimetadatasectionkeywo.AppendChild(fieldlabelsectionkeywo);
        qtimetadatasectionkeywo.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatasectionrubric = miXml.CreateElement("qtimetadatafield");
        sectionqtimetad.AppendChild(qtimetadatasectionrubric);
        XmlElement fieldlabelsectionrubric = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsectionrubrictext = miXml.CreateTextNode("SECTION_RUBRIC");
        fieldlabelsectionrubric.AppendChild(fieldlabelsectionrubrictext);
        qtimetadatasectionrubric.AppendChild(fieldlabelsectionrubric);
        qtimetadatasectionrubric.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatasectionattach = miXml.CreateElement("qtimetadatafield");
        sectionqtimetad.AppendChild(qtimetadatasectionattach);
        XmlElement fieldlabelsectionattach = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsectionattachtext = miXml.CreateTextNode("ATTACHMENT");
        fieldlabelsectionattach.AppendChild(fieldlabelsectionattachtext);
        qtimetadatasectionattach.AppendChild(fieldlabelsectionattach);
        qtimetadatasectionattach.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatasectionpoolidrand = miXml.CreateElement("qtimetadatafield");
        sectionqtimetad.AppendChild(qtimetadatasectionpoolidrand);
        XmlElement fieldlabelsectionpoolidrand = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsectionpoolidrandtext = miXml.CreateTextNode("POOLID_FOR_RANDOM_DRAW");
        fieldlabelsectionpoolidrand.AppendChild(fieldlabelsectionpoolidrandtext);
        qtimetadatasectionpoolidrand.AppendChild(fieldlabelsectionpoolidrand);
        qtimetadatasectionpoolidrand.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatasectionpoolnamerand = miXml.CreateElement("qtimetadatafield");
        sectionqtimetad.AppendChild(qtimetadatasectionpoolnamerand);
        XmlElement fieldlabelsectionpoolnamerand = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsectionpoolnamerandtext = miXml.CreateTextNode("POOLNAME_FOR_RANDOM_DRAW");
        fieldlabelsectionpoolnamerand.AppendChild(fieldlabelsectionpoolnamerandtext);
        qtimetadatasectionpoolnamerand.AppendChild(fieldlabelsectionpoolnamerand);
        qtimetadatasectionpoolnamerand.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatasectionnumquests = miXml.CreateElement("qtimetadatafield");
        sectionqtimetad.AppendChild(qtimetadatasectionnumquests);
        XmlElement fieldlabelsectionnumquests = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsectionnumqueststext = miXml.CreateTextNode("NUM_QUESTIONS_DRAWN");
        fieldlabelsectionnumquests.AppendChild(fieldlabelsectionnumqueststext);
        qtimetadatasectionnumquests.AppendChild(fieldlabelsectionnumquests);
        qtimetadatasectionnumquests.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatasectionrandomiztyp = miXml.CreateElement("qtimetadatafield");
        sectionqtimetad.AppendChild(qtimetadatasectionrandomiztyp);
        XmlElement fieldlabelsectionrandomiztyp = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsectionrandomiztyptext = miXml.CreateTextNode("RANDOMIZATION_TYPE");
        fieldlabelsectionrandomiztyp.AppendChild(fieldlabelsectionrandomiztyptext);
        qtimetadatasectionrandomiztyp.AppendChild(fieldlabelsectionrandomiztyp);
        qtimetadatasectionrandomiztyp.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatasectionpointforquesti = miXml.CreateElement("qtimetadatafield");
        sectionqtimetad.AppendChild(qtimetadatasectionpointforquesti);
        XmlElement fieldlabelsectionpointforquesti = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsectionpointforquestitext = miXml.CreateTextNode("POINT_VALUE_FOR_QUESTION");
        fieldlabelsectionpointforquesti.AppendChild(fieldlabelsectionpointforquestitext);
        qtimetadatasectionpointforquesti.AppendChild(fieldlabelsectionpointforquesti);
        qtimetadatasectionpointforquesti.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement qtimetadatasectiondiscouforquesti = miXml.CreateElement("qtimetadatafield");
        sectionqtimetad.AppendChild(qtimetadatasectiondiscouforquesti);
        XmlElement fieldlabelsectiondiscouforquesti = miXml.CreateElement("fieldlabel");
        XmlText fieldlabelsectiondiscouforquestitext = miXml.CreateTextNode("DISCOUNT_VALUE_FOR_QUESTION");
        fieldlabelsectiondiscouforquesti.AppendChild(fieldlabelsectiondiscouforquestitext);
        qtimetadatasectiondiscouforquesti.AppendChild(fieldlabelsectiondiscouforquesti);
        qtimetadatasectiondiscouforquesti.AppendChild(miXml.CreateElement("fieldentry"));

        XmlElement sectionpresentationmaterial = miXml.CreateElement("presentation_material");
        section.AppendChild(sectionpresentationmaterial);

        XmlElement sectionpmflowmat = miXml.CreateElement("flow_mat");
        XmlAttribute sectionpmflowmatclass = miXml.CreateAttribute("class");
        sectionpmflowmatclass.Value = "Block";
        sectionpmflowmat.Attributes.Append(sectionpmflowmatclass);
        sectionpresentationmaterial.AppendChild(sectionpmflowmat);

        XmlElement sectionpmflowmatmatt = miXml.CreateElement("material");
        sectionpmflowmat.AppendChild(sectionpmflowmatmatt);

        XmlElement sectionpmflowmatmattext = miXml.CreateElement("mattext");
        XmlAttribute sectionpmflowmatmattextcharset = miXml.CreateAttribute("charset");
        sectionpmflowmatmattextcharset.Value = "ascii-us";
        sectionpmflowmatmattext.Attributes.Append(sectionpmflowmatmattextcharset);
        XmlAttribute sectionpmflowmatmattexttexttype = miXml.CreateAttribute("texttype");
        sectionpmflowmatmattexttexttype.Value = "text/plain";
        sectionpmflowmatmattext.Attributes.Append(sectionpmflowmatmattexttexttype);
        XmlAttribute sectionpmflowmatmattextxmlspace = miXml.CreateAttribute("xml:space");
        sectionpmflowmatmattextxmlspace.Value = "default";
        sectionpmflowmatmattext.Attributes.Append(sectionpmflowmatmattextxmlspace);
        sectionpmflowmatmatt.AppendChild(sectionpmflowmatmattext);

        XmlElement sectionpmflowmatmati = miXml.CreateElement("material");
        sectionpmflowmat.AppendChild(sectionpmflowmatmati);

        XmlElement sectionpmflowmatmatimg = miXml.CreateElement("matimage");
        XmlAttribute sectionpmflowmatmatimgembedded = miXml.CreateAttribute("embedded");
        sectionpmflowmatmatimgembedded.Value = "base64";
        sectionpmflowmatmatimg.Attributes.Append(sectionpmflowmatmatimgembedded);
        XmlAttribute sectionpmflowmatmatimgimagtype = miXml.CreateAttribute("imagtype");
        sectionpmflowmatmatimgimagtype.Value = "text/html";
        sectionpmflowmatmatimg.Attributes.Append(sectionpmflowmatmatimgimagtype);
        XmlAttribute sectionpmflowmatmatimguri = miXml.CreateAttribute("uri");
        sectionpmflowmatmatimguri.Value = "";
        sectionpmflowmatmatimg.Attributes.Append(sectionpmflowmatmatimguri);
        sectionpmflowmatmati.AppendChild(sectionpmflowmatmatimg);

        XmlElement selectionordering = miXml.CreateElement("selection_ordering");
        XmlAttribute selectionorderingsequencetype = miXml.CreateAttribute("sequence_type");
        selectionorderingsequencetype.Value = "Normal";
        selectionordering.Attributes.Append(selectionorderingsequencetype);
        section.AppendChild(selectionordering);

        XmlElement selectionorderingselection = miXml.CreateElement("selection");
        selectionordering.AppendChild(selectionorderingselection);

        XmlElement selectionorderingselectionsourcebankref = miXml.CreateElement("sourcebank_ref");
        selectionorderingselection.AppendChild(selectionorderingselectionsourcebankref);
        XmlElement selectionorderingselectionselectionnumber = miXml.CreateElement("selection_number");
        selectionorderingselection.AppendChild(selectionorderingselectionselectionnumber);

        XmlElement selectionorderingorder = miXml.CreateElement("order");
        XmlAttribute selectionorderingordertype = miXml.CreateAttribute("order_type");
        selectionorderingordertype.Value = "Sequential";
        selectionorderingorder.Attributes.Append(selectionorderingordertype);
        selectionordering.AppendChild(selectionorderingorder);

        int itemident = 9960884;

        for (int i = 0; i < listado.Count; i++)
        {
            itemident++;
            string item_ident = itemident.ToString();

            string preguntayrespuesta = listado[i].ToString();
            ArrayList preguntas = new ArrayList();
            ArrayList respuestas = new ArrayList();
            bool empiezaconblanco = false;
            int contadoridentificador = 0;

            bool tienepuntos = false;

            string puntos = "1";
            string puntosneg = "0";

            char[] charspregresp = preguntayrespuesta.ToCharArray();

            int posicionfinpuntos = 0;

            if (charspregresp.Length > 3)
            {
                string puntosleidos = "";

                if ((charspregresp[0] == '<')
                           &&
                       (charspregresp[1] == 'M'))
                {
                    bool haaparecidoelpunto = false;
                    for (int n = 2; n < charspregresp.Length; n++)
                    {
                        if (charspregresp[n] == '>')
                        {
                            posicionfinpuntos = n;
                            break;
                        }
                        if ((charspregresp[n] == '0')
                                   ||
                               (charspregresp[n] == '1')
                                   ||
                               (charspregresp[n] == '2')
                                   ||
                               (charspregresp[n] == '3')
                                   ||
                               (charspregresp[n] == '4')
                                   ||
                               (charspregresp[n] == '5')
                                   ||
                               (charspregresp[n] == '6')
                                   ||
                               (charspregresp[n] == '7')
                                   ||
                               (charspregresp[n] == '8')
                                   ||
                               (charspregresp[n] == '9')
                                   ||
                               ((charspregresp[n] == '.') && !haaparecidoelpunto)
                                   ||
                               ((charspregresp[n] == ',') && !haaparecidoelpunto))
                        {
                            puntosleidos += charspregresp[n].ToString();
                            if ((charspregresp[n] == '.') || (charspregresp[n] == ',')) haaparecidoelpunto = true;
                        }
                        else break;
                    }
                }
                if (!string.IsNullOrEmpty(puntosleidos))
                {
                    puntos = puntosleidos.Replace(',', '.');
                    tienepuntos = true;
                }
            }

            if (!string.IsNullOrEmpty(preguntayrespuesta))
            {
                if (!tienepuntos)
                {
                    if ((preguntayrespuesta.ToCharArray()[0] == '{')
                                      &&
                          (preguntayrespuesta.Contains("}")))
                    {
                        empiezaconblanco = true;
                    }
                }
                else
                {
                    string auxquitarpuntos = preguntayrespuesta;

                    int posicioniniciopregunta = posicionfinpuntos + 1;
                    if (posicioniniciopregunta < preguntayrespuesta.Length)
                        preguntayrespuesta = auxquitarpuntos.Substring(posicioniniciopregunta, auxquitarpuntos.Length - posicioniniciopregunta);

                    int posicionprimercharnoblanco = 0;
                    for (int o = 0; o < preguntayrespuesta.Length; o++)
                    {
                        if (preguntayrespuesta.ToCharArray()[o] == ' ') posicionprimercharnoblanco++;
                        else break;
                    }
                    if (posicionprimercharnoblanco < preguntayrespuesta.Length)
                    {
                        if ((preguntayrespuesta.ToCharArray()[posicionprimercharnoblanco] == '{')
                                        &&
                              (preguntayrespuesta.Contains("}")))
                        {
                            empiezaconblanco = true;
                        }
                    }
                }
                string[] partes = preguntayrespuesta.Split(new string[] { "{" }, StringSplitOptions.None);

                foreach (string parte in partes)
                {
                    if ((!parte.Contains("}"))
                           &&
                           (!string.IsNullOrEmpty(parte)))
                    {
                        preguntas.Add(parte);
                    }
                    else
                    {
                        string[] partes2 = parte.Split(new string[] { "}" }, StringSplitOptions.None);
                        respuestas.Add(partes2[0]);
                        if ((partes2.Length > 1)
                              &&
                              (!string.IsNullOrEmpty(partes2[1])))
                        {
                            preguntas.Add(partes2[1]);
                        }
                    }
                }
                string primerapart = partes[0].ToString();
                char[] charsprimerapart = primerapart.ToCharArray();


                if (charsprimerapart.Length > 4)
                {
                    string puntosleidos = "";

                    if ((primerapart[0] == '<')
                               &&
                           (primerapart[1] == 'M')
                               &&
                           (primerapart[2] == 'N'))
                    {
                        bool haaparecidoelpunto = false;
                        for (int n = 3; n < charsprimerapart.Length; n++)
                        {
                            if (charsprimerapart[n] == '>')
                            {
                                posicionfinpuntos = n;
                                break;
                            }
                            if ((charsprimerapart[n] == '0')
                                       ||
                                   (charsprimerapart[n] == '1')
                                       ||
                                   (charsprimerapart[n] == '2')
                                       ||
                                   (charsprimerapart[n] == '3')
                                       ||
                                   (charsprimerapart[n] == '4')
                                       ||
                                   (charsprimerapart[n] == '5')
                                       ||
                                   (charsprimerapart[n] == '6')
                                       ||
                                   (charsprimerapart[n] == '7')
                                       ||
                                   (charsprimerapart[n] == '8')
                                       ||
                                   (charsprimerapart[n] == '9')
                                       ||
                                   ((charsprimerapart[n] == '.') && !haaparecidoelpunto)
                                       ||
                                   ((charsprimerapart[n] == ',') && !haaparecidoelpunto))
                            {
                                puntosleidos += charsprimerapart[n].ToString();
                                if ((charsprimerapart[n] == '.') || (charsprimerapart[n] == ',')) haaparecidoelpunto = true;
                            }
                            else break;
                        }
                    }
                    if (!string.IsNullOrEmpty(puntosleidos))
                    {
                        puntosneg = puntosleidos.Replace(',', '.');

                        string auxquitarpuntos = primerapart;

                        int posicioniniciopregunta = posicionfinpuntos + 1;
                        if (primerapart.Length == posicioniniciopregunta) empiezaconblanco = true;
                        else primerapart = auxquitarpuntos.Substring(posicioniniciopregunta);//elimina marca <MN>

                        preguntas[0] = primerapart; //cambiado

                    }//fin if(!string.IsNullOrEmpty(puntosleidos))

                }   //fin if(charsprimerapart.Length>4)
            }//fin if(!string.IsNullOrEmpty(preguntayrespuesta))



            XmlElement item = miXml.CreateElement("item");
            XmlAttribute id = miXml.CreateAttribute("ident");
            id.Value = item_ident;
            item.Attributes.Append(id);
            XmlAttribute titl = miXml.CreateAttribute("title");

            if (tipoPreguntas[0].ToString() == "N") titl.Value = "Numeric Response";
            if (tipoPreguntas[0].ToString() == "F") titl.Value = "Fill in Blank";
            if (tipoPreguntas[0].ToString() == "M")
            {
                string[] partesrc = preguntayrespuesta.Split(new string[] { "<rc>" }, StringSplitOptions.None);
                if (partesrc.Length > 2) titl.Value = "Multiple Correct";
                else titl.Value = "Multiple Choice";
            }
            if (tipoPreguntas.Count > 1) tipoPreguntas.RemoveAt(0);

            item.Attributes.Append(titl);
            section.AppendChild(item);

            XmlElement durat = miXml.CreateElement("duration");
            item.AppendChild(durat);

            XmlElement itemmetadata = miXml.CreateElement("itemmetadata");
            item.AppendChild(itemmetadata);

            XmlElement qtimeta = miXml.CreateElement("qtimetadata");
            itemmetadata.AppendChild(qtimeta);

            XmlElement qtimetafieldqmditemtype = miXml.CreateElement("qtimetadatafield");
            qtimeta.AppendChild(qtimetafieldqmditemtype);
            XmlElement fieldlabelqmditemtype = miXml.CreateElement("fieldlabel");
            XmlText fieldlabelqmditemtypetext = miXml.CreateTextNode("qmd_itemtype");
            fieldlabelqmditemtype.AppendChild(fieldlabelqmditemtypetext);
            qtimetafieldqmditemtype.AppendChild(fieldlabelqmditemtype);
            XmlElement fieldentryqmditemtype = miXml.CreateElement("fieldentry");
            XmlText fieldentryqmditemtypetext = miXml.CreateTextNode(titl.Value.ToString());
            if (titl.Value.ToString() == "Fill in Blank")
                fieldentryqmditemtypetext = miXml.CreateTextNode("Fill In the Blank");
            if (titl.Value.ToString() == "Multiple Correct")
                fieldentryqmditemtypetext = miXml.CreateTextNode("Multiple Correct Answer");
            fieldentryqmditemtype.AppendChild(fieldentryqmditemtypetext);
            qtimetafieldqmditemtype.AppendChild(fieldentryqmditemtype);

            XmlElement qtimetafieldtextformat = miXml.CreateElement("qtimetadatafield");
            qtimeta.AppendChild(qtimetafieldtextformat);
            XmlElement fieldlabeltextformat = miXml.CreateElement("fieldlabel");
            XmlText fieldlabeltextformattext = miXml.CreateTextNode("TEXT_FORMAT");
            fieldlabeltextformat.AppendChild(fieldlabeltextformattext);
            qtimetafieldtextformat.AppendChild(fieldlabeltextformat);
            XmlElement fieldentrytextformat = miXml.CreateElement("fieldentry");
            XmlText fieldentrytextformattext = miXml.CreateTextNode("HTML");
            fieldentrytextformat.AppendChild(fieldentrytextformattext);
            qtimetafieldtextformat.AppendChild(fieldentrytextformat);

            if (titl.Value.ToString() == "Fill in Blank")

            {

                XmlElement qtimetafieldmutualexclus = miXml.CreateElement("qtimetadatafield");
                qtimeta.AppendChild(qtimetafieldmutualexclus);
                XmlElement fieldlabelmutualexclus = miXml.CreateElement("fieldlabel");
                XmlText fieldlabelmutualexclustext = miXml.CreateTextNode("MUTUALLY_EXCLUSIVE");
                fieldlabelmutualexclus.AppendChild(fieldlabelmutualexclustext);
                qtimetafieldmutualexclus.AppendChild(fieldlabelmutualexclus);
                XmlElement fieldentrymutualexclus = miXml.CreateElement("fieldentry");
                XmlText fieldentrymutualexclustext = miXml.CreateTextNode("false");
                fieldentrymutualexclus.AppendChild(fieldentrymutualexclustext);
                qtimetafieldmutualexclus.AppendChild(fieldentrymutualexclus);

                XmlElement qtimetafieldcasesensit = miXml.CreateElement("qtimetadatafield");
                qtimeta.AppendChild(qtimetafieldcasesensit);
                XmlElement fieldlabelcasesensit = miXml.CreateElement("fieldlabel");
                XmlText fieldlabelcasesensittext = miXml.CreateTextNode("CASE_SENSITIVE");
                fieldlabelcasesensit.AppendChild(fieldlabelcasesensittext);
                qtimetafieldcasesensit.AppendChild(fieldlabelcasesensit);
                XmlElement fieldentrycasesensit = miXml.CreateElement("fieldentry");
                XmlText fieldentrycasesensittext = miXml.CreateTextNode("false");
                fieldentrycasesensit.AppendChild(fieldentrycasesensittext);
                qtimetafieldcasesensit.AppendChild(fieldentrycasesensit);


				XmlElement qtimetafieldignorespaces = miXml.CreateElement("qtimetadatafield");
                qtimeta.AppendChild(qtimetafieldignorespaces);
                XmlElement fieldlabelignorespaces = miXml.CreateElement("fieldlabel");
                XmlText fieldlabelignorespacestext = miXml.CreateTextNode("IGNORE_SPACES");
                fieldlabelignorespaces.AppendChild(fieldlabelignorespacestext);
                qtimetafieldignorespaces.AppendChild(fieldlabelignorespaces);
                XmlElement fieldentryignorespaces = miXml.CreateElement("fieldentry");
                XmlText fieldentryignorespacestext = miXml.CreateTextNode("true");
                fieldentryignorespaces.AppendChild(fieldentryignorespacestext);
                qtimetafieldignorespaces.AppendChild(fieldentryignorespaces);

            }

            XmlElement qtimetafielditemobjective = miXml.CreateElement("qtimetadatafield");
            qtimeta.AppendChild(qtimetafielditemobjective);
            XmlElement fieldlabelitemobjective = miXml.CreateElement("fieldlabel");
            XmlText fieldlabelitemobjectivetext = miXml.CreateTextNode("ITEM_OBJECTIVE");
            fieldlabelitemobjective.AppendChild(fieldlabelitemobjectivetext);
            qtimetafielditemobjective.AppendChild(fieldlabelitemobjective);
            qtimetafielditemobjective.AppendChild(miXml.CreateElement("fieldentry"));

            XmlElement qtimetafielditemkeyword = miXml.CreateElement("qtimetadatafield");
            qtimeta.AppendChild(qtimetafielditemkeyword);
            XmlElement fieldlabelitemkeyword = miXml.CreateElement("fieldlabel");
            XmlText fieldlabelitemkeywordtext = miXml.CreateTextNode("ITEM_KEYWORD");
            fieldlabelitemkeyword.AppendChild(fieldlabelitemkeywordtext);
            qtimetafielditemkeyword.AppendChild(fieldlabelitemkeyword);
            qtimetafielditemkeyword.AppendChild(miXml.CreateElement("fieldentry"));

            XmlElement qtimetafielditemrubric = miXml.CreateElement("qtimetadatafield");
            qtimeta.AppendChild(qtimetafielditemrubric);
            XmlElement fieldlabelitemrubric = miXml.CreateElement("fieldlabel");
            XmlText fieldlabelitemrubrictext = miXml.CreateTextNode("ITEM_RUBRIC");
            fieldlabelitemrubric.AppendChild(fieldlabelitemrubrictext);
            qtimetafielditemrubric.AppendChild(fieldlabelitemrubric);
            qtimetafielditemrubric.AppendChild(miXml.CreateElement("fieldentry"));

            XmlElement qtimetafieldattach = miXml.CreateElement("qtimetadatafield");
            qtimeta.AppendChild(qtimetafieldattach);
            XmlElement fieldlabelattach = miXml.CreateElement("fieldlabel");
            XmlText fieldlabelattachtext = miXml.CreateTextNode("ATTACHMENT");
            fieldlabelattach.AppendChild(fieldlabelattachtext);
            qtimetafieldattach.AppendChild(fieldlabelattach);
            qtimetafieldattach.AppendChild(miXml.CreateElement("fieldentry"));

            if ((titl.Value.ToString() == "Multiple Choice")
               || (titl.Value.ToString() == "Multiple Correct"))
            {
                XmlElement qtimetafieldhasrational = miXml.CreateElement("qtimetadatafield");
                qtimeta.AppendChild(qtimetafieldhasrational);
                XmlElement fieldlabelhasrational = miXml.CreateElement("fieldlabel");
                XmlText fieldlabelhasrationaltext = miXml.CreateTextNode("hasRationale");
                fieldlabelhasrational.AppendChild(fieldlabelhasrationaltext);
                qtimetafieldhasrational.AppendChild(fieldlabelhasrational);
                XmlElement fieldentryhasrational = miXml.CreateElement("fieldentry");
                XmlText fieldentryhasrationaltext = miXml.CreateTextNode("false");
                fieldentryhasrational.AppendChild(fieldentryhasrationaltext);
                qtimetafieldhasrational.AppendChild(fieldentryhasrational);
            }

            if (titl.Value.ToString() == "Multiple Choice")
            {
                XmlElement qtimetafieldpartialcredi = miXml.CreateElement("qtimetadatafield");
                qtimeta.AppendChild(qtimetafieldpartialcredi);
                XmlElement fieldlabelpartialcredi = miXml.CreateElement("fieldlabel");
                XmlText fieldlabelpartialcreditext = miXml.CreateTextNode("PARTIAL_CREDIT");
                fieldlabelpartialcredi.AppendChild(fieldlabelpartialcreditext);
                qtimetafieldpartialcredi.AppendChild(fieldlabelpartialcredi);
                XmlElement fieldentrypartialcredi = miXml.CreateElement("fieldentry");
                XmlText fieldentrypartialcreditext = miXml.CreateTextNode("FALSE");
                fieldentrypartialcredi.AppendChild(fieldentrypartialcreditext);
                qtimetafieldpartialcredi.AppendChild(fieldentrypartialcredi);
            }

            if ((titl.Value.ToString() == "Multiple Choice")
               || (titl.Value.ToString() == "Multiple Correct"))
            {
                XmlElement qtimetafieldrandomiz = miXml.CreateElement("qtimetadatafield");
                qtimeta.AppendChild(qtimetafieldrandomiz);
                XmlElement fieldlabelrandomiz = miXml.CreateElement("fieldlabel");
                XmlText fieldlabelrandomiztext = miXml.CreateTextNode("RANDOMIZE");
                fieldlabelrandomiz.AppendChild(fieldlabelrandomiztext);
                qtimetafieldrandomiz.AppendChild(fieldlabelrandomiz);
                XmlElement fieldentryrandomiz = miXml.CreateElement("fieldentry");

                XmlText fieldentryrandomiztext = miXml.CreateTextNode("true");  //Toni

                fieldentryrandomiz.AppendChild(fieldentryrandomiztext);
                qtimetafieldrandomiz.AppendChild(fieldentryrandomiz);
            }

            XmlElement itemrubric = miXml.CreateElement("rubric");
            XmlAttribute itemrubricview = miXml.CreateAttribute("view");
            itemrubricview.Value = "All";
            itemrubric.Attributes.Append(itemrubricview);
            item.AppendChild(itemrubric);

            XmlElement itrubmaterial = miXml.CreateElement("material");
            itemrubric.AppendChild(itrubmaterial);

            XmlElement itrubmattext = miXml.CreateElement("mattext");
            XmlAttribute itrubmattextcharset = miXml.CreateAttribute("charset");
            itrubmattextcharset.Value = "ascii-us";
            itrubmattext.Attributes.Append(itrubmattextcharset);
            XmlAttribute itrubmattexttexttype = miXml.CreateAttribute("texttype");
            itrubmattexttexttype.Value = "text/plain";
            itrubmattext.Attributes.Append(itrubmattexttexttype);
            XmlAttribute itrubmattextxmlspace = miXml.CreateAttribute("xml:space");
            itrubmattextxmlspace.Value = "default";
            itrubmattext.Attributes.Append(itrubmattextxmlspace);
            itrubmaterial.AppendChild(itrubmattext);

            XmlElement itempresentation = miXml.CreateElement("presentation");
            XmlAttribute itempresentationlabel = miXml.CreateAttribute("label");

            if (titl.Value.ToString() == "Numeric Response") itempresentationlabel.Value = "FIN";
            if (titl.Value.ToString() == "Fill in Blank") itempresentationlabel.Value = "FIB";
            if ((titl.Value.ToString() == "Multiple Choice")
               || (titl.Value.ToString() == "Multiple Correct")) itempresentationlabel.Value = "Resp003";

            itempresentation.Attributes.Append(itempresentationlabel);
            item.AppendChild(itempresentation);

            XmlElement itpresflow = miXml.CreateElement("flow");
            if ((titl.Value.ToString() == "Numeric Response")
              || (titl.Value.ToString() == "Fill in Blank"))
            {
                XmlAttribute itpresflowclass = miXml.CreateAttribute("class");
                itpresflowclass.Value = "Block";
                itpresflow.Attributes.Append(itpresflowclass);
                itempresentation.AppendChild(itpresflow);
            }

            XmlElement itpresflowflow = miXml.CreateElement("flow");
            XmlAttribute itpresflowflowclass = miXml.CreateAttribute("class");
            itpresflowflowclass.Value = "Block";
            itpresflowflow.Attributes.Append(itpresflowflowclass);
            if ((titl.Value.ToString() == "Numeric Response")
              || (titl.Value.ToString() == "Fill in Blank")) itpresflow.AppendChild(itpresflowflow);
            else itempresentation.AppendChild(itpresflowflow);


            XmlElement itpresflflmaterial = miXml.CreateElement("material");
            itpresflowflow.AppendChild(itpresflflmaterial);

            XmlElement itpresflflmattext = miXml.CreateElement("mattext");
            XmlAttribute itpresflflmattextcharset = miXml.CreateAttribute("charset");
            itpresflflmattextcharset.Value = "ascii-us";
            itpresflflmattext.Attributes.Append(itpresflflmattextcharset);
            XmlAttribute itpresflflmattexttexttype = miXml.CreateAttribute("texttype");
            itpresflflmattexttexttype.Value = "text/plain";
            itpresflflmattext.Attributes.Append(itpresflflmattexttexttype);
            XmlAttribute itpresflflmattextxmlspace = miXml.CreateAttribute("xml:space");
            itpresflflmattextxmlspace.Value = "default";
            itpresflflmattext.Attributes.Append(itpresflflmattextxmlspace);
            itpresflflmaterial.AppendChild(itpresflflmattext);
            XmlCDataSection itpresflflmattextcdata;

            string primerapregunta;
            if (empiezaconblanco) primerapregunta = "";
            else
            {
                primerapregunta = preguntas[0].ToString();
                preguntas.RemoveAt(0);
            }

            if ((titl.Value.ToString() == "Numeric Response")
              || (titl.Value.ToString() == "Fill in Blank"))
            {

                itpresflflmattextcdata = miXml.CreateCDataSection(primerapregunta);
                itpresflflmattext.AppendChild(itpresflflmattextcdata);


                bool ultimaronda = false;

                bool insertadomaterialsincdata = false;

                while ((preguntas.Count > 0) || (!ultimaronda && !empiezaconblanco))
                {
                    if (preguntas.Count == 0) ultimaronda = true;

                    if (contadoridentificador < respuestas.Count)
                    {
                        XmlElement itpresflflmaterial2 = miXml.CreateElement("material");
                        itpresflowflow.AppendChild(itpresflflmaterial2);

                        XmlElement itpresflflmattext2 = miXml.CreateElement("mattext");
                        XmlAttribute itpresflflmattextcharset2 = miXml.CreateAttribute("charset");
                        itpresflflmattextcharset2.Value = "ascii-us";
                        itpresflflmattext2.Attributes.Append(itpresflflmattextcharset2);
                        XmlAttribute itpresflflmattexttexttype2 = miXml.CreateAttribute("texttype");
                        itpresflflmattexttexttype2.Value = "text/plain";
                        itpresflflmattext2.Attributes.Append(itpresflflmattexttexttype2);
                        XmlAttribute itpresflflmattextxmlspace2 = miXml.CreateAttribute("xml:space");
                        itpresflflmattextxmlspace2.Value = "default";
                        itpresflflmattext2.Attributes.Append(itpresflflmattextxmlspace2);
                        itpresflflmaterial2.AppendChild(itpresflflmattext2);
                        if (!ultimaronda)
                        {
                            XmlCDataSection itpresflflmattextcdata2;
                            itpresflflmattextcdata2 = miXml.CreateCDataSection(preguntas[0].ToString());
                            itpresflflmattext2.AppendChild(itpresflflmattextcdata2);
                            preguntas.RemoveAt(0);
                        }
                        else insertadomaterialsincdata = true;

                        XmlElement itpresflflresponsestr = miXml.CreateElement("response_str");
                        XmlAttribute itpresflflresponsestrident = miXml.CreateAttribute("ident");
                        itpresflflresponsestrident.Value = itempresentationlabel.Value.ToString() + "0" + contadoridentificador.ToString();
                        contadoridentificador++;
                        itpresflflresponsestr.Attributes.Append(itpresflflresponsestrident);
                        XmlAttribute itpresflflresponsestrrcardinality = miXml.CreateAttribute("rcardinality");
                        itpresflflresponsestrrcardinality.Value = "Ordered";
                        itpresflflresponsestr.Attributes.Append(itpresflflresponsestrrcardinality);
                        XmlAttribute itpresflflresponsestrrtiming = miXml.CreateAttribute("rtiming");
                        itpresflflresponsestrrtiming.Value = "No";
                        itpresflflresponsestr.Attributes.Append(itpresflflresponsestrrtiming);
                        itpresflowflow.AppendChild(itpresflflresponsestr);

                        if (titl.Value.ToString() == "Numeric Response")
                        {
                            XmlElement itpresflflresprenderfin = miXml.CreateElement("render_fin");
                            XmlAttribute itpresflflresprenderfincolumns = miXml.CreateAttribute("columns");
                            itpresflflresprenderfincolumns.Value = "5";
                            itpresflflresprenderfin.Attributes.Append(itpresflflresprenderfincolumns);
                            XmlAttribute itpresflflresprenderfinfintype = miXml.CreateAttribute("fintype");
                            itpresflflresprenderfinfintype.Value = "String";
                            itpresflflresprenderfin.Attributes.Append(itpresflflresprenderfinfintype);
                            XmlAttribute itpresflflresprenderfinprompt = miXml.CreateAttribute("prompt");
                            itpresflflresprenderfinprompt.Value = "Box";
                            itpresflflresprenderfin.Attributes.Append(itpresflflresprenderfinprompt);
                            XmlAttribute itpresflflresprenderfinrows = miXml.CreateAttribute("rows");
                            itpresflflresprenderfinrows.Value = "1";
                            itpresflflresprenderfin.Attributes.Append(itpresflflresprenderfinrows);
                            itpresflflresponsestr.AppendChild(itpresflflresprenderfin);
                        }
                        else
                        {
                            XmlElement itpresflflresprenderfib = miXml.CreateElement("render_fib");
                            XmlAttribute itpresflflresprenderfibcharset = miXml.CreateAttribute("charset");
                            itpresflflresprenderfibcharset.Value = "ascii-us";
                            itpresflflresprenderfib.Attributes.Append(itpresflflresprenderfibcharset);
                            XmlAttribute itpresflflresprenderfibcolumns = miXml.CreateAttribute("columns");
                            itpresflflresprenderfibcolumns.Value = "5";
                            itpresflflresprenderfib.Attributes.Append(itpresflflresprenderfibcolumns);
                            XmlAttribute itpresflflresprenderfibencoding = miXml.CreateAttribute("encoding");
                            itpresflflresprenderfibencoding.Value = "UTF_8";
                            itpresflflresprenderfib.Attributes.Append(itpresflflresprenderfibencoding);
                            XmlAttribute itpresflflresprenderfibfibtype = miXml.CreateAttribute("fibtype");
                            itpresflflresprenderfibfibtype.Value = "String";
                            itpresflflresprenderfib.Attributes.Append(itpresflflresprenderfibfibtype);
                            XmlAttribute itpresflflresprenderfibprompt = miXml.CreateAttribute("prompt");
                            itpresflflresprenderfibprompt.Value = "Box";
                            itpresflflresprenderfib.Attributes.Append(itpresflflresprenderfibprompt);
                            XmlAttribute itpresflflresprenderfibrows = miXml.CreateAttribute("rows");
                            itpresflflresprenderfibrows.Value = "1";
                            itpresflflresprenderfib.Attributes.Append(itpresflflresprenderfibrows);
                            itpresflflresponsestr.AppendChild(itpresflflresprenderfib);
                        }

                    } // fin if(contadoridentificador<respuestas.Count)

                } //fin while((preguntas.Count>0)||(!ultimaronda && !empiezaconblanco))

                if (!insertadomaterialsincdata)
                {
                    XmlElement itpresflflmaterial3 = miXml.CreateElement("material");
                    itpresflowflow.AppendChild(itpresflflmaterial3);

                    XmlElement itpresflflmattext3 = miXml.CreateElement("mattext");
                    XmlAttribute itpresflflmattextcharset3 = miXml.CreateAttribute("charset");
                    itpresflflmattextcharset3.Value = "ascii-us";
                    itpresflflmattext3.Attributes.Append(itpresflflmattextcharset3);
                    XmlAttribute itpresflflmattexttexttype3 = miXml.CreateAttribute("texttype");
                    itpresflflmattexttexttype3.Value = "text/plain";
                    itpresflflmattext3.Attributes.Append(itpresflflmattexttexttype3);
                    XmlAttribute itpresflflmattextxmlspace3 = miXml.CreateAttribute("xml:space");
                    itpresflflmattextxmlspace3.Value = "default";
                    itpresflflmattext3.Attributes.Append(itpresflflmattextxmlspace3);
                    itpresflflmaterial3.AppendChild(itpresflflmattext3);
                }

                XmlElement itemresprocessing = miXml.CreateElement("resprocessing");
                item.AppendChild(itemresprocessing);

                XmlElement itemresprocoutcomes = miXml.CreateElement("outcomes");
                itemresprocessing.AppendChild(itemresprocoutcomes);

                XmlElement itemresprocoutcdecvar = miXml.CreateElement("decvar");
                XmlAttribute itemresprocoutcdecdefaultval = miXml.CreateAttribute("defaultval");
                itemresprocoutcdecdefaultval.Value = "0";
                itemresprocoutcdecvar.Attributes.Append(itemresprocoutcdecdefaultval);
                XmlAttribute itemresprocoutcdecmaxvalue = miXml.CreateAttribute("maxvalue");
                itemresprocoutcdecmaxvalue.Value = puntos;                                  //asignaci√≥n puntos
                itemresprocoutcdecvar.Attributes.Append(itemresprocoutcdecmaxvalue);
                XmlAttribute itemresprocoutcdecminvalue = miXml.CreateAttribute("minvalue");
                itemresprocoutcdecminvalue.Value = puntosneg;                           //asignaci√≥n puntos negativos
                itemresprocoutcdecvar.Attributes.Append(itemresprocoutcdecminvalue);
                XmlAttribute itemresprocoutcdecvarname = miXml.CreateAttribute("varname");
                itemresprocoutcdecvarname.Value = "SCORE";
                itemresprocoutcdecvar.Attributes.Append(itemresprocoutcdecvarname);
                XmlAttribute itemresprocoutcdecvartype = miXml.CreateAttribute("vartype");
                itemresprocoutcdecvartype.Value = "Integer";
                itemresprocoutcdecvar.Attributes.Append(itemresprocoutcdecvartype);
                itemresprocoutcomes.AppendChild(itemresprocoutcdecvar);




                contadoridentificador = 0;

                if (empiezaconblanco) respuestas.RemoveAt(0);

                while (respuestas.Count > 0)
                {
                    XmlElement itemresprocrespcondition = miXml.CreateElement("respcondition");
                    XmlAttribute itemresprocrespcondcontinue = miXml.CreateAttribute("continue");
                    itemresprocrespcondcontinue.Value = "Yes";
                    itemresprocrespcondition.Attributes.Append(itemresprocrespcondcontinue);
                    itemresprocessing.AppendChild(itemresprocrespcondition);

                    XmlElement itemresprocrespcondvar = miXml.CreateElement("conditionvar");
                    itemresprocrespcondition.AppendChild(itemresprocrespcondvar);

                    XmlElement itemresprocrespcondvaror = miXml.CreateElement("or");
                    itemresprocrespcondvar.AppendChild(itemresprocrespcondvaror);

                    XmlElement itemresprocrespcondvaroreq = miXml.CreateElement("varequal");
                    XmlAttribute itemresprocrespcondvaroreqcase = miXml.CreateAttribute("case");
                    itemresprocrespcondvaroreqcase.Value = "No";
                    itemresprocrespcondvaroreq.Attributes.Append(itemresprocrespcondvaroreqcase);
                    XmlAttribute itemresprocrespcondvaroreqrpid = miXml.CreateAttribute("respident");
                    itemresprocrespcondvaroreqrpid.Value = itempresentationlabel.Value.ToString() + "0" + contadoridentificador.ToString();
                    contadoridentificador++;
                    itemresprocrespcondvaroreq.Attributes.Append(itemresprocrespcondvaroreqrpid);
                    XmlCDataSection itemresprocrespcondvaroreqcdata;
                    itemresprocrespcondvaroreqcdata = miXml.CreateCDataSection(respuestas[0].ToString());
                    respuestas.RemoveAt(0);
                    itemresprocrespcondvaroreq.AppendChild(itemresprocrespcondvaroreqcdata);
                    itemresprocrespcondvaror.AppendChild(itemresprocrespcondvaroreq);

                    XmlElement itemresprocrespcondvarsetvar = miXml.CreateElement("setvar");
                    XmlAttribute itemresprocrespcondvarsetvaraction = miXml.CreateAttribute("action");
                    itemresprocrespcondvarsetvaraction.Value = "Add";
                    itemresprocrespcondvarsetvar.Attributes.Append(itemresprocrespcondvarsetvaraction);
                    XmlAttribute itemresprocrespcondvarsetvarvarname = miXml.CreateAttribute("varname");
                    itemresprocrespcondvarsetvarvarname.Value = "SCORE";
                    itemresprocrespcondvarsetvar.Attributes.Append(itemresprocrespcondvarsetvarvarname);
                    XmlText itemresprocrespcondvarsetvartext = miXml.CreateTextNode("0");
                    itemresprocrespcondvarsetvar.AppendChild(itemresprocrespcondvarsetvartext);
                    itemresprocrespcondition.AppendChild(itemresprocrespcondvarsetvar);
                }

                XmlElement itemfeedback = miXml.CreateElement("itemfeedback");
                XmlAttribute itemfeedbackident = miXml.CreateAttribute("ident");
                itemfeedbackident.Value = "Correct";
                itemfeedback.Attributes.Append(itemfeedbackident);
                XmlAttribute itemfeedbackview = miXml.CreateAttribute("view");
                itemfeedbackview.Value = "All";
                itemfeedback.Attributes.Append(itemfeedbackview);
                item.AppendChild(itemfeedback);

                XmlElement itfeedflowmat = miXml.CreateElement("flow_mat");
                XmlAttribute itfeedflowmatclass = miXml.CreateAttribute("class");
                itfeedflowmatclass.Value = "Block";
                itfeedflowmat.Attributes.Append(itfeedflowmatclass);
                itemfeedback.AppendChild(itfeedflowmat);

                XmlElement itfeedflmater = miXml.CreateElement("material");
                itfeedflowmat.AppendChild(itfeedflmater);

                XmlElement itfeedflmatertext = miXml.CreateElement("mattext");
                XmlAttribute itfeedflmatertextcharset = miXml.CreateAttribute("charset");
                itfeedflmatertextcharset.Value = "ascii-us";
                itfeedflmatertext.Attributes.Append(itfeedflmatertextcharset);
                XmlAttribute itfeedflmatertexttexttype = miXml.CreateAttribute("texttype");
                itfeedflmatertexttexttype.Value = "text/plain";
                itfeedflmatertext.Attributes.Append(itfeedflmatertexttexttype);
                XmlAttribute itfeedflmatertextxmlspace = miXml.CreateAttribute("xml:space");
                itfeedflmatertextxmlspace.Value = "default";
                itfeedflmatertext.Attributes.Append(itfeedflmatertextxmlspace);
                itfeedflmater.AppendChild(itfeedflmatertext);

                XmlElement itfeedflmateri = miXml.CreateElement("material");
                itfeedflowmat.AppendChild(itfeedflmateri);

                XmlElement itfeedflmaterimag = miXml.CreateElement("matimage");
                XmlAttribute itfeedflmaterimagembedded = miXml.CreateAttribute("embedded");
                itfeedflmaterimagembedded.Value = "base64";
                itfeedflmaterimag.Attributes.Append(itfeedflmaterimagembedded);
                XmlAttribute itfeedflmaterimagimagtype = miXml.CreateAttribute("imagtype");
                itfeedflmaterimagimagtype.Value = "text/html";
                itfeedflmaterimag.Attributes.Append(itfeedflmaterimagimagtype);
                XmlAttribute itfeedflmaterimaguri = miXml.CreateAttribute("uri");
                itfeedflmaterimaguri.Value = "";
                itfeedflmaterimag.Attributes.Append(itfeedflmaterimaguri);
                itfeedflmateri.AppendChild(itfeedflmaterimag);

                XmlElement itemfeedbacki = miXml.CreateElement("itemfeedback");
                XmlAttribute itemfeedbackiident = miXml.CreateAttribute("ident");
                itemfeedbackiident.Value = "InCorrect";
                itemfeedbacki.Attributes.Append(itemfeedbackiident);
                XmlAttribute itemfeedbackiview = miXml.CreateAttribute("view");
                itemfeedbackiview.Value = "All";
                itemfeedbacki.Attributes.Append(itemfeedbackiview);
                item.AppendChild(itemfeedbacki);

                XmlElement itfeediflowmat = miXml.CreateElement("flow_mat");
                XmlAttribute itfeediflowmatclass = miXml.CreateAttribute("class");
                itfeediflowmatclass.Value = "Block";
                itfeediflowmat.Attributes.Append(itfeediflowmatclass);
                itemfeedbacki.AppendChild(itfeediflowmat);

                XmlElement itfeediflmater = miXml.CreateElement("material");
                itfeediflowmat.AppendChild(itfeediflmater);

                XmlElement itfeediflmatertext = miXml.CreateElement("mattext");
                XmlAttribute itfeediflmatertextcharset = miXml.CreateAttribute("charset");
                itfeediflmatertextcharset.Value = "ascii-us";
                itfeediflmatertext.Attributes.Append(itfeediflmatertextcharset);
                XmlAttribute itfeediflmatertexttexttype = miXml.CreateAttribute("texttype");
                itfeediflmatertexttexttype.Value = "text/plain";
                itfeediflmatertext.Attributes.Append(itfeediflmatertexttexttype);
                XmlAttribute itfeediflmatertextxmlspace = miXml.CreateAttribute("xml:space");
                itfeediflmatertextxmlspace.Value = "default";
                itfeediflmatertext.Attributes.Append(itfeediflmatertextxmlspace);
                itfeediflmater.AppendChild(itfeediflmatertext);

                XmlElement itfeediflmateri = miXml.CreateElement("material");
                itfeediflowmat.AppendChild(itfeediflmateri);

                XmlElement itfeediflmaterimag = miXml.CreateElement("matimage");
                XmlAttribute itfeediflmaterimagembedded = miXml.CreateAttribute("embedded");
                itfeediflmaterimagembedded.Value = "base64";
                itfeediflmaterimag.Attributes.Append(itfeediflmaterimagembedded);
                XmlAttribute itfeediflmaterimagimagtype = miXml.CreateAttribute("imagtype");
                itfeediflmaterimagimagtype.Value = "text/html";
                itfeediflmaterimag.Attributes.Append(itfeediflmaterimagimagtype);
                XmlAttribute itfeediflmaterimaguri = miXml.CreateAttribute("uri");
                itfeediflmaterimaguri.Value = "";
                itfeediflmaterimag.Attributes.Append(itfeediflmaterimaguri);
                itfeediflmateri.AppendChild(itfeediflmaterimag);

            }
            else //tipo test
            {
                string[] partespreguntatest = primerapregunta.Split(new string[] { "<op>" }, StringSplitOptions.None);
                string enunciadopreguntatest = partespreguntatest[0];
                if (enunciadopreguntatest.EndsWith("<br>"))
                {
                    string auxquitarbr = enunciadopreguntatest;
                    enunciadopreguntatest = auxquitarbr.Substring(0, auxquitarbr.Length - 4);
                }

                ArrayList respuestastest = new ArrayList();

                bool[] soncorrectas = new bool[26];

                for (int p = 0; p < soncorrectas.Length; p++)
                {
                    soncorrectas[p] = false;
                }

                if (partespreguntatest.Length > 0)
                {
                    for (int z = 1; z < partespreguntatest.Length; z++)
                    {

                        respuestastest.Add(partespreguntatest[z].ToString());
                    }

                    for (int q = 0; q < respuestastest.Count; q++)
                    {
                        string respuestatest = respuestastest[q].ToString();
                        if (respuestatest.Contains("<rc>")) soncorrectas[q] = true;
                    }

                    for (int x = 0; x < respuestastest.Count; x++)
                    {
                        string mirespuestatest = respuestastest[x].ToString();
                        if (mirespuestatest.Contains("<rc>"))
                            respuestastest[x] = mirespuestatest.Substring(4);
                    }
                }

                itpresflflmattextcdata = miXml.CreateCDataSection(enunciadopreguntatest);
                itpresflflmattext.AppendChild(itpresflflmattextcdata);

                XmlElement itpresflflmaterial2 = miXml.CreateElement("material");
                itpresflowflow.AppendChild(itpresflflmaterial2);

                XmlElement itpresflflmaterial2matimg = miXml.CreateElement("matimage");
                XmlAttribute itpresflflmaterial2matimgembedded = miXml.CreateAttribute("embedded");
                itpresflflmaterial2matimgembedded.Value = "base64";
                itpresflflmaterial2matimg.Attributes.Append(itpresflflmaterial2matimgembedded);
                XmlAttribute itpresflflmaterial2matimgimagtype = miXml.CreateAttribute("imagtype");
                itpresflflmaterial2matimgimagtype.Value = "text/html";
                itpresflflmaterial2matimg.Attributes.Append(itpresflflmaterial2matimgimagtype);
                XmlAttribute itpresflflmaterial2matimguri = miXml.CreateAttribute("uri");
                itpresflflmaterial2matimguri.Value = null;
                itpresflflmaterial2matimg.Attributes.Append(itpresflflmaterial2matimguri);
                itpresflflmaterial2.AppendChild(itpresflflmaterial2matimg);

                XmlElement itpresflflresplid = miXml.CreateElement("response_lid");
                XmlAttribute itpresflflresplidid = miXml.CreateAttribute("ident");
                if (titl.Value.ToString() == "Multiple Choice") itpresflflresplidid.Value = "MCSC";
                else itpresflflresplidid.Value = "LID01";
                itpresflflresplid.Attributes.Append(itpresflflresplidid);
                XmlAttribute itpresflflresplidrcardin = miXml.CreateAttribute("rcardinality");
                if (titl.Value.ToString() == "Multiple Choice") itpresflflresplidrcardin.Value = "Single";
                else itpresflflresplidrcardin.Value = "Multiple";
                itpresflflresplid.Attributes.Append(itpresflflresplidrcardin);
                XmlAttribute itpresflflresplidrtim = miXml.CreateAttribute("rtiming");
                itpresflflresplidrtim.Value = "No";
                itpresflflresplid.Attributes.Append(itpresflflresplidrtim);
                itpresflowflow.AppendChild(itpresflflresplid);

                XmlElement itpresflflresplidrendcho = miXml.CreateElement("render_choice");
                XmlAttribute itpresflflresplidrendchoshuf = miXml.CreateAttribute("shuffle");
                itpresflflresplidrendchoshuf.Value = "No";
                itpresflflresplidrendcho.Attributes.Append(itpresflflresplidrendchoshuf);
                itpresflflresplid.AppendChild(itpresflflresplidrendcho);

                int numresptest = respuestastest.Count;

                char letraresp = 'A';

                for (int w = 0; w < numresptest; w++)
                {
                    XmlElement itpresflflresplidrendchoresp = miXml.CreateElement("response_label");
                    XmlAttribute itpresflflresplidrendchorespid = miXml.CreateAttribute("ident");
                    itpresflflresplidrendchorespid.Value = letraresp.ToString();
                    letraresp++;
                    itpresflflresplidrendchoresp.Attributes.Append(itpresflflresplidrendchorespid);
                    XmlAttribute itpresflflresplidrendchoresprarea = miXml.CreateAttribute("rarea");
                    itpresflflresplidrendchoresprarea.Value = ("Ellipse");
                    itpresflflresplidrendchoresp.Attributes.Append(itpresflflresplidrendchoresprarea);
                    XmlAttribute itpresflflresplidrendchoresprrange = miXml.CreateAttribute("rrange");
                    itpresflflresplidrendchoresprrange.Value = ("Exact");
                    itpresflflresplidrendchoresp.Attributes.Append(itpresflflresplidrendchoresprrange);
                    XmlAttribute itpresflflresplidrendchoresprshuffle = miXml.CreateAttribute("rshuffle");
                    itpresflflresplidrendchoresprshuffle.Value = ("Yes");
                    itpresflflresplidrendchoresp.Attributes.Append(itpresflflresplidrendchoresprshuffle);
                    itpresflflresplidrendcho.AppendChild(itpresflflresplidrendchoresp);

                    XmlElement itpresflflresplidrendchorespmat1 = miXml.CreateElement("material");
                    itpresflflresplidrendchoresp.AppendChild(itpresflflresplidrendchorespmat1);

                    XmlElement itpresflflresplidrendchorespmat1matt = miXml.CreateElement("mattext");
                    XmlAttribute itpresflflresplidrendchorespmat1mattch = miXml.CreateAttribute("charset");
                    itpresflflresplidrendchorespmat1mattch.Value = ("ascii-us");
                    itpresflflresplidrendchorespmat1matt.Attributes.Append(itpresflflresplidrendchorespmat1mattch);
                    XmlAttribute itpresflflresplidrendchorespmat1matttt = miXml.CreateAttribute("texttype");
                    itpresflflresplidrendchorespmat1matttt.Value = ("text/plain");
                    itpresflflresplidrendchorespmat1matt.Attributes.Append(itpresflflresplidrendchorespmat1matttt);
                    XmlAttribute itpresflflresplidrendchorespmat1mattxs = miXml.CreateAttribute("xml:space");
                    itpresflflresplidrendchorespmat1mattxs.Value = ("default");
                    itpresflflresplidrendchorespmat1matt.Attributes.Append(itpresflflresplidrendchorespmat1mattxs);
                    XmlCDataSection itpresflflresplidrendchorespmat1mattcd;
                    string auxresptest = respuestastest[0].ToString();
                    string auxresptest2 = respuestastest[0].ToString();
                    if (auxresptest.EndsWith("<br>")) auxresptest = auxresptest2.Substring(0, auxresptest2.Length - 4);
                    itpresflflresplidrendchorespmat1mattcd = miXml.CreateCDataSection(auxresptest);
                    itpresflflresplidrendchorespmat1matt.AppendChild(itpresflflresplidrendchorespmat1mattcd);
                    itpresflflresplidrendchorespmat1.AppendChild(itpresflflresplidrendchorespmat1matt);

                    if (w < 4)
                    {
                        XmlElement itpresflflresplidrendchorespmat2 = miXml.CreateElement("material");
                        itpresflflresplidrendchoresp.AppendChild(itpresflflresplidrendchorespmat2);

                        XmlElement itpresflflresplidrendchorespmat2mati = miXml.CreateElement("matimage");
                        XmlAttribute itpresflflresplidrendchorespmat2matiemb = miXml.CreateAttribute("embedded");
                        itpresflflresplidrendchorespmat2matiemb.Value = "base64";
                        itpresflflresplidrendchorespmat2mati.Attributes.Append(itpresflflresplidrendchorespmat2matiemb);
                        XmlAttribute itpresflflresplidrendchorespmat2matiity = miXml.CreateAttribute("imagtype");
                        itpresflflresplidrendchorespmat2matiity.Value = "text/html";
                        itpresflflresplidrendchorespmat2mati.Attributes.Append(itpresflflresplidrendchorespmat2matiity);
                        XmlAttribute itpresflflresplidrendchorespmat2matiuri = miXml.CreateAttribute("uri");
                        itpresflflresplidrendchorespmat2matiuri.Value = null;
                        itpresflflresplidrendchorespmat2mati.Attributes.Append(itpresflflresplidrendchorespmat2matiuri);
                        itpresflflresplidrendchorespmat2.AppendChild(itpresflflresplidrendchorespmat2mati);
                    }

                    respuestastest.RemoveAt(0);
                }

                int cuatromenosnumresp = 4 - numresptest;

                for (int vv = 0; vv < cuatromenosnumresp; vv++)
                {
                    XmlElement itpresflflresplidrendchorespult = miXml.CreateElement("response_label");
                    XmlAttribute itpresflflresplidrendchorespidult = miXml.CreateAttribute("ident");
                    itpresflflresplidrendchorespidult.Value = letraresp.ToString();
                    letraresp++;
                    itpresflflresplidrendchorespult.Attributes.Append(itpresflflresplidrendchorespidult);
                    XmlAttribute itpresflflresplidrendchoresprareault = miXml.CreateAttribute("rarea");
                    itpresflflresplidrendchoresprareault.Value = ("Ellipse");
                    itpresflflresplidrendchorespult.Attributes.Append(itpresflflresplidrendchoresprareault);
                    XmlAttribute itpresflflresplidrendchoresprrangeult = miXml.CreateAttribute("rrange");
                    itpresflflresplidrendchoresprrangeult.Value = ("Exact");
                    itpresflflresplidrendchorespult.Attributes.Append(itpresflflresplidrendchoresprrangeult);
                    XmlAttribute itpresflflresplidrendchoresprshuffleult = miXml.CreateAttribute("rshuffle");
                    itpresflflresplidrendchoresprshuffleult.Value = ("Yes");
                    itpresflflresplidrendchorespult.Attributes.Append(itpresflflresplidrendchoresprshuffleult);
                    itpresflflresplidrendcho.AppendChild(itpresflflresplidrendchorespult);

                    XmlElement itpresflflresplidrendchorespmat1ult = miXml.CreateElement("material");
                    itpresflflresplidrendchorespult.AppendChild(itpresflflresplidrendchorespmat1ult);

                    XmlElement itpresflflresplidrendchorespmat1mattult = miXml.CreateElement("mattext");
                    XmlAttribute itpresflflresplidrendchorespmat1mattchult = miXml.CreateAttribute("charset");
                    itpresflflresplidrendchorespmat1mattchult.Value = ("ascii-us");
                    itpresflflresplidrendchorespmat1mattult.Attributes.Append(itpresflflresplidrendchorespmat1mattchult);
                    XmlAttribute itpresflflresplidrendchorespmat1mattttult = miXml.CreateAttribute("texttype");
                    itpresflflresplidrendchorespmat1mattttult.Value = ("text/plain");
                    itpresflflresplidrendchorespmat1mattult.Attributes.Append(itpresflflresplidrendchorespmat1mattttult);
                    XmlAttribute itpresflflresplidrendchorespmat1mattxsult = miXml.CreateAttribute("xml:space");
                    itpresflflresplidrendchorespmat1mattxsult.Value = ("default");
                    itpresflflresplidrendchorespmat1mattult.Attributes.Append(itpresflflresplidrendchorespmat1mattxsult);
                    itpresflflresplidrendchorespmat1ult.AppendChild(itpresflflresplidrendchorespmat1mattult);

                    XmlElement itpresflflresplidrendchorespmat2ult = miXml.CreateElement("material");
                    itpresflflresplidrendchorespult.AppendChild(itpresflflresplidrendchorespmat2ult);

                    XmlElement itpresflflresplidrendchorespmat2matiult = miXml.CreateElement("matimage");
                    XmlAttribute itpresflflresplidrendchorespmat2matiembult = miXml.CreateAttribute("embedded");
                    itpresflflresplidrendchorespmat2matiembult.Value = "base64";
                    itpresflflresplidrendchorespmat2matiult.Attributes.Append(itpresflflresplidrendchorespmat2matiembult);
                    XmlAttribute itpresflflresplidrendchorespmat2matiityult = miXml.CreateAttribute("imagtype");
                    itpresflflresplidrendchorespmat2matiityult.Value = "text/html";
                    itpresflflresplidrendchorespmat2matiult.Attributes.Append(itpresflflresplidrendchorespmat2matiityult);
                    XmlAttribute itpresflflresplidrendchorespmat2matiuriult = miXml.CreateAttribute("uri");
                    itpresflflresplidrendchorespmat2matiuriult.Value = null;
                    itpresflflresplidrendchorespmat2matiult.Attributes.Append(itpresflflresplidrendchorespmat2matiuriult);
                    itpresflflresplidrendchorespmat2ult.AppendChild(itpresflflresplidrendchorespmat2matiult);
                }


                for (int v = 0; v < 4; v++)
                {
                    XmlElement itpresflflresplidrendchorespvacio = miXml.CreateElement("response_label");
                    XmlAttribute itpresflflresplidrendchoresprareav = miXml.CreateAttribute("rarea");
                    itpresflflresplidrendchoresprareav.Value = ("Ellipse");
                    itpresflflresplidrendchorespvacio.Attributes.Append(itpresflflresplidrendchoresprareav);
                    XmlAttribute itpresflflresplidrendchoresprrangev = miXml.CreateAttribute("rrange");
                    itpresflflresplidrendchoresprrangev.Value = ("Exact");
                    itpresflflresplidrendchorespvacio.Attributes.Append(itpresflflresplidrendchoresprrangev);
                    XmlAttribute itpresflflresplidrendchoresprshufflev = miXml.CreateAttribute("rshuffle");
                    itpresflflresplidrendchoresprshufflev.Value = ("Yes");
                    itpresflflresplidrendchorespvacio.Attributes.Append(itpresflflresplidrendchoresprshufflev);
                    itpresflflresplidrendcho.AppendChild(itpresflflresplidrendchorespvacio);

                    XmlElement itpresflflresplidrendchorespmatv = miXml.CreateElement("material");
                    itpresflflresplidrendchorespvacio.AppendChild(itpresflflresplidrendchorespmatv);

                    XmlElement itpresflflresplidrendchorespmatvmatt = miXml.CreateElement("mattext");
                    XmlAttribute itpresflflresplidrendchorespmatvmattchult = miXml.CreateAttribute("charset");
                    itpresflflresplidrendchorespmatvmattchult.Value = ("ascii-us");
                    itpresflflresplidrendchorespmatvmatt.Attributes.Append(itpresflflresplidrendchorespmatvmattchult);
                    XmlAttribute itpresflflresplidrendchorespmatvmattttult = miXml.CreateAttribute("texttype");
                    itpresflflresplidrendchorespmatvmattttult.Value = ("text/plain");
                    itpresflflresplidrendchorespmatvmatt.Attributes.Append(itpresflflresplidrendchorespmatvmattttult);
                    XmlAttribute itpresflflresplidrendchorespmatvmattxsult = miXml.CreateAttribute("xml:space");
                    itpresflflresplidrendchorespmatvmattxsult.Value = ("default");
                    itpresflflresplidrendchorespmatvmatt.Attributes.Append(itpresflflresplidrendchorespmatvmattxsult);
                    itpresflflresplidrendchorespmatv.AppendChild(itpresflflresplidrendchorespmatvmatt);
                }

                XmlElement itemresproc = miXml.CreateElement("resprocessing");
                item.AppendChild(itemresproc);

                XmlElement itemresprocoutc = miXml.CreateElement("outcomes");
                itemresproc.AppendChild(itemresprocoutc);

                XmlElement itemresprocoutcdecvar = miXml.CreateElement("decvar");
                XmlAttribute itemresprocoutcdecvardefaultval = miXml.CreateAttribute("defaultval");
                itemresprocoutcdecvardefaultval.Value = ("0");
                itemresprocoutcdecvar.Attributes.Append(itemresprocoutcdecvardefaultval);
                XmlAttribute itemresprocoutcdecvarmaxvalue = miXml.CreateAttribute("maxvalue");
                itemresprocoutcdecvarmaxvalue.Value = puntos;
                itemresprocoutcdecvar.Attributes.Append(itemresprocoutcdecvarmaxvalue);
                XmlAttribute itemresprocoutcdecvarminvalue = miXml.CreateAttribute("minvalue");
                itemresprocoutcdecvarminvalue.Value = puntosneg;
                itemresprocoutcdecvar.Attributes.Append(itemresprocoutcdecvarminvalue);
                XmlAttribute itemresprocoutcdecvarvarname = miXml.CreateAttribute("varname");
                itemresprocoutcdecvarvarname.Value = ("SCORE");
                itemresprocoutcdecvar.Attributes.Append(itemresprocoutcdecvarvarname);
                XmlAttribute itemresprocoutcdecvarvartype = miXml.CreateAttribute("vartype");
                itemresprocoutcdecvarvartype.Value = ("Integer");
                itemresprocoutcdecvar.Attributes.Append(itemresprocoutcdecvarvartype);
                itemresprocoutc.AppendChild(itemresprocoutcdecvar);

                char abcdario = 'A';

                for (int abc = 0; abc < 26; abc++)
                {
                    XmlElement itemresprrespc = miXml.CreateElement("respcondition");
                    XmlAttribute itemresprrespccontinue = miXml.CreateAttribute("continue");
                    if (abc > 3) itemresprrespccontinue.Value = ("Yes");
                    else itemresprrespccontinue.Value = ("No");
                    if (titl.Value.ToString() == "Multiple Correct") itemresprrespccontinue.Value = ("Yes");
                    itemresprrespc.Attributes.Append(itemresprrespccontinue);
                    itemresproc.AppendChild(itemresprrespc);

                    XmlElement itemresprrespccondvar = miXml.CreateElement("conditionvar");
                    itemresprrespc.AppendChild(itemresprrespccondvar);

                    XmlElement itemresprrespccondvarvareq = miXml.CreateElement("varequal");
                    XmlAttribute itemresprrespccondvarvareqcase = miXml.CreateAttribute("case");
                    itemresprrespccondvarvareqcase.Value = ("Yes");
                    itemresprrespccondvarvareq.Attributes.Append(itemresprrespccondvarvareqcase);
                    XmlAttribute itemresprrespccondvarvareqrespident = miXml.CreateAttribute("respident");
                    if (titl.Value.ToString() == "Multiple Correct") itemresprrespccondvarvareqrespident.Value = ("LID01");
                    else itemresprrespccondvarvareqrespident.Value = ("MCSC");
                    itemresprrespccondvarvareq.Attributes.Append(itemresprrespccondvarvareqrespident);
                    itemresprrespccondvarvareq.InnerText = abcdario.ToString();
                    itemresprrespccondvar.AppendChild(itemresprrespccondvarvareq);

                    XmlElement itemresprrespcsetvar = miXml.CreateElement("setvar");
                    XmlAttribute itemresprrespcsetvaraction = miXml.CreateAttribute("action");
                    itemresprrespcsetvaraction.Value = ("Add");
                    itemresprrespcsetvar.Attributes.Append(itemresprrespcsetvaraction);
                    XmlAttribute itemresprrespcsetvarvarname = miXml.CreateAttribute("varname");
                    itemresprrespcsetvarvarname.Value = ("SCORE");
                    itemresprrespcsetvar.Attributes.Append(itemresprrespcsetvarvarname);
                    itemresprrespcsetvar.InnerText = "0";
                    itemresprrespc.AppendChild(itemresprrespcsetvar);

                    XmlElement itemresprrespcdispfeed = miXml.CreateElement("displayfeedback");
                    XmlAttribute itemresprrespcdispfeedfeedbacktype = miXml.CreateAttribute("feedbacktype");
                    itemresprrespcdispfeedfeedbacktype.Value = ("Response");
                    itemresprrespcdispfeed.Attributes.Append(itemresprrespcdispfeedfeedbacktype);
                    XmlAttribute itemresprrespcdispfeedlinkrefid = miXml.CreateAttribute("linkrefid");
                    if (soncorrectas[abc] == true) itemresprrespcdispfeedlinkrefid.Value = "Correct";
                    else itemresprrespcdispfeedlinkrefid.Value = "InCorrect";
                    itemresprrespcdispfeed.Attributes.Append(itemresprrespcdispfeedlinkrefid);
                    itemresprrespc.AppendChild(itemresprrespcdispfeed);

                    XmlElement itemresprrespcdispfeed2 = miXml.CreateElement("displayfeedback");
                    XmlAttribute itemresprrespcdispfeed2feedbacktype = miXml.CreateAttribute("feedbacktype");
                    itemresprrespcdispfeed2feedbacktype.Value = ("Response");
                    itemresprrespcdispfeed2.Attributes.Append(itemresprrespcdispfeed2feedbacktype);
                    XmlAttribute itemresprrespcdispfeed2linkrefid = miXml.CreateAttribute("linkrefid");
                    if (abc > 3)
                    {
                        char auxcharresp = 'D';
                        itemresprrespcdispfeed2linkrefid.Value = auxcharresp.ToString() + "1";
                    }
                    else
                    {
                        itemresprrespcdispfeed2linkrefid.Value = abcdario.ToString() + "1";
                        if (titl.Value.ToString() == "Multiple Correct")
                            itemresprrespcdispfeed2linkrefid.Value = "AnswerFeedback";
                    }
                    itemresprrespcdispfeed2.Attributes.Append(itemresprrespcdispfeed2linkrefid);

                    if ((titl.Value.ToString() == "Multiple Correct")
                       && (abc < numresptest))
                    {
                        XmlCDataSection itemresprrespcdispfeed2cdata = miXml.CreateCDataSection(null);
                        itemresprrespcdispfeed2.AppendChild(itemresprrespcdispfeed2cdata);
                    }

                    itemresprrespc.AppendChild(itemresprrespcdispfeed2);

                    abcdario++;
                }

                char auxcharitemfeed = 'A';

                for (int nn = 0; nn < 6; nn++)
                {
                    XmlElement itemresprocitfeed = miXml.CreateElement("itemfeedback");
                    XmlAttribute itemresprocitfeedident = miXml.CreateAttribute("ident");
                    string itemresprocitfeedid = auxcharitemfeed.ToString() + "1";
                    itemresprocitfeedident.Value = itemresprocitfeedid.ToString();
                    if (nn == 4) itemresprocitfeedident.Value = "Correct";
                    if (nn == 5) itemresprocitfeedident.Value = "Incorrect";
                    itemresprocitfeed.Attributes.Append(itemresprocitfeedident);
                    XmlAttribute itemresprocitfeedview = miXml.CreateAttribute("view");
                    itemresprocitfeedview.Value = ("All");
                    itemresprocitfeed.Attributes.Append(itemresprocitfeedview);
                    item.AppendChild(itemresprocitfeed);

                    XmlElement itemresprocitfeedflmat = miXml.CreateElement("flow_mat");
                    XmlAttribute itemresprocitfeedflmatclass = miXml.CreateAttribute("class");
                    itemresprocitfeedflmatclass.Value = ("Block");
                    itemresprocitfeedflmat.Attributes.Append(itemresprocitfeedflmatclass);
                    itemresprocitfeed.AppendChild(itemresprocitfeedflmat);

                    XmlElement itemresprocitfeedflmatmat1 = miXml.CreateElement("material");
                    itemresprocitfeedflmat.AppendChild(itemresprocitfeedflmatmat1);

                    XmlElement itemresprocitfeedflmatmat1text = miXml.CreateElement("mattext");
                    XmlAttribute itemresprocitfeedflmatmat1textcharset = miXml.CreateAttribute("charset");
                    itemresprocitfeedflmatmat1textcharset.Value = ("ascii-us");
                    itemresprocitfeedflmatmat1text.Attributes.Append(itemresprocitfeedflmatmat1textcharset);
                    XmlAttribute itemresprocitfeedflmatmat1texttexttype = miXml.CreateAttribute("texttype");
                    itemresprocitfeedflmatmat1texttexttype.Value = ("text/plain");
                    itemresprocitfeedflmatmat1text.Attributes.Append(itemresprocitfeedflmatmat1texttexttype);
                    XmlAttribute itemresprocitfeedflmatmat1textxmlspace = miXml.CreateAttribute("xml:space");
                    itemresprocitfeedflmatmat1textxmlspace.Value = ("default");
                    itemresprocitfeedflmatmat1text.Attributes.Append(itemresprocitfeedflmatmat1textxmlspace);
                    itemresprocitfeedflmatmat1.AppendChild(itemresprocitfeedflmatmat1text);

                    XmlElement itemresprocitfeedflmatmat2 = miXml.CreateElement("material");
                    itemresprocitfeedflmat.AppendChild(itemresprocitfeedflmatmat2);

                    XmlElement itemresprocitfeedflmatmat2img = miXml.CreateElement("matimage");
                    XmlAttribute itemresprocitfeedflmatmat2imgembedded = miXml.CreateAttribute("embedded");
                    itemresprocitfeedflmatmat2imgembedded.Value = ("base64");
                    itemresprocitfeedflmatmat2img.Attributes.Append(itemresprocitfeedflmatmat2imgembedded);
                    XmlAttribute itemresprocitfeedflmatmat2imgimagtype = miXml.CreateAttribute("imagtype");
                    itemresprocitfeedflmatmat2imgimagtype.Value = ("text/html");
                    itemresprocitfeedflmatmat2img.Attributes.Append(itemresprocitfeedflmatmat2imgimagtype);
                    XmlAttribute itemresprocitfeedflmatmat2imguri = miXml.CreateAttribute("uri");
                    itemresprocitfeedflmatmat2imguri.Value = null;
                    itemresprocitfeedflmatmat2img.Attributes.Append(itemresprocitfeedflmatmat2imguri);
                    itemresprocitfeedflmatmat2.AppendChild(itemresprocitfeedflmatmat2img);

                    auxcharitemfeed++;
                }



            } //fin tipo test

            numeroDePreguntasGeneradas++;

        } //fin for(int i=0; i<listado.Count; i++)

        string miPath = ruta;
        int posicionUltimaBarra = miPath.LastIndexOf('\\');
        miPath = miPath.Substring(0, posicionUltimaBarra);


        //miPath = miPath + '\\' + nombreXML + ".xml";
        miPath = server_path + '\\' + nombreXML + ".xml";

        //miXml.Save(Server.MapPath(@miPath));

        XmlWriterSettings settings = new XmlWriterSettings
        {
            Encoding = Encoding.Default,
            ConformanceLevel = ConformanceLevel.Document,
            OmitXmlDeclaration = false,
            CloseOutput = true,
            Indent = true,
            IndentChars = "  ",
            NewLineHandling = NewLineHandling.Replace
        };

        //using (StreamWriter sw = File.CreateText(Server.MapPath(@miPath)))
        using (StreamWriter sw = File.CreateText(miPath))
        using (XmlWriter writer = XmlWriter.Create(sw, settings))
        {
            miXml.WriteContentTo(writer);
            writer.Close();
        }
        return nombreXML + ".xml";


    } //fin crearXml




            $compteurbis = $doc->CreateElement("number".$y);
            $text = $doc->createCDATAsection($line[$x+$y]);
            $compteurbis->appendChild($text);
            $section->appendChild($compteurbis);

}
